// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dev ops webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dev ops webhook API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dev ops webhook API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dev ops webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlainCharsetUTF8 sets the Accept header to "text/plain; charset=utf-8".
func WithAcceptTextPlainCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain; charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetNotifyCommit(params *GetNotifyCommitParams, opts ...ClientOption) (*GetNotifyCommitOK, error)

	GithubWebhook(params *GithubWebhookParams, opts ...ClientOption) (*GithubWebhookOK, error)

	PostNotifyCommit(params *PostNotifyCommitParams, opts ...ClientOption) (*PostNotifyCommitOK, error)

	ReceiveEventsFromJenkins(params *ReceiveEventsFromJenkinsParams, opts ...ClientOption) (*ReceiveEventsFromJenkinsOK, error)

	GenericWebhook(params *GenericWebhookParams, opts ...ClientOption) (*GenericWebhookOK, error)

	ScmWebhook(params *ScmWebhookParams, opts ...ClientOption) (*ScmWebhookOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetNotifyCommit gets commit notification by HTTP g e t method git webhook will request here
*/
func (a *Client) GetNotifyCommit(params *GetNotifyCommitParams, opts ...ClientOption) (*GetNotifyCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotifyCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNotifyCommit",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/webhook/git",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotifyCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotifyCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNotifyCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GithubWebhook gets commit notification github webhook will request here
*/
func (a *Client) GithubWebhook(params *GithubWebhookParams, opts ...ClientOption) (*GithubWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGithubWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GithubWebhook",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/webhook/github",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GithubWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GithubWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GithubWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostNotifyCommit gets commit notification by HTTP p o s t method git webhook will request here
*/
func (a *Client) PostNotifyCommit(params *PostNotifyCommitParams, opts ...ClientOption) (*PostNotifyCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostNotifyCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostNotifyCommit",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/webhook/git",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostNotifyCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostNotifyCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostNotifyCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReceiveEventsFromJenkins webhooks for receiving events from jenkins
*/
func (a *Client) ReceiveEventsFromJenkins(params *ReceiveEventsFromJenkinsParams, opts ...ClientOption) (*ReceiveEventsFromJenkinsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReceiveEventsFromJenkinsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReceiveEventsFromJenkins",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/webhooks/jenkins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReceiveEventsFromJenkinsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReceiveEventsFromJenkinsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReceiveEventsFromJenkins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenericWebhook this is a generic webhook trigger currently it support jenkins only
*/
func (a *Client) GenericWebhook(params *GenericWebhookParams, opts ...ClientOption) (*GenericWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenericWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "genericWebhook",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/webhook/generic-trigger",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenericWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenericWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for genericWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScmWebhook scm webhook API
*/
func (a *Client) ScmWebhook(params *ScmWebhookParams, opts ...ClientOption) (*ScmWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScmWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scmWebhook",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/webhooks/scm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScmWebhookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScmWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scmWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
