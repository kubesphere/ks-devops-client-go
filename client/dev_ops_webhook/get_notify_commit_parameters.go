// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetNotifyCommitParams creates a new GetNotifyCommitParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetNotifyCommitParams() *GetNotifyCommitParams {
	return &GetNotifyCommitParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetNotifyCommitParamsWithTimeout creates a new GetNotifyCommitParams object
// with the ability to set a timeout on a request.
func NewGetNotifyCommitParamsWithTimeout(timeout time.Duration) *GetNotifyCommitParams {
	return &GetNotifyCommitParams{
		timeout: timeout,
	}
}

// NewGetNotifyCommitParamsWithContext creates a new GetNotifyCommitParams object
// with the ability to set a context for a request.
func NewGetNotifyCommitParamsWithContext(ctx context.Context) *GetNotifyCommitParams {
	return &GetNotifyCommitParams{
		Context: ctx,
	}
}

// NewGetNotifyCommitParamsWithHTTPClient creates a new GetNotifyCommitParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetNotifyCommitParamsWithHTTPClient(client *http.Client) *GetNotifyCommitParams {
	return &GetNotifyCommitParams{
		HTTPClient: client,
	}
}

/*
GetNotifyCommitParams contains all the parameters to send to the API endpoint

	for the get notify commit operation.

	Typically these are written to a http.Request.
*/
type GetNotifyCommitParams struct {

	/* URL.

	   Git url

	   Format: url=%s
	*/
	URL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get notify commit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNotifyCommitParams) WithDefaults() *GetNotifyCommitParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get notify commit params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetNotifyCommitParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get notify commit params
func (o *GetNotifyCommitParams) WithTimeout(timeout time.Duration) *GetNotifyCommitParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get notify commit params
func (o *GetNotifyCommitParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get notify commit params
func (o *GetNotifyCommitParams) WithContext(ctx context.Context) *GetNotifyCommitParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get notify commit params
func (o *GetNotifyCommitParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get notify commit params
func (o *GetNotifyCommitParams) WithHTTPClient(client *http.Client) *GetNotifyCommitParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get notify commit params
func (o *GetNotifyCommitParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithURL adds the url to the get notify commit params
func (o *GetNotifyCommitParams) WithURL(url string) *GetNotifyCommitParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the get notify commit params
func (o *GetNotifyCommitParams) SetURL(url string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *GetNotifyCommitParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param url
	qrURL := o.URL
	qURL := qrURL
	if qURL != "" {

		if err := r.SetQueryParam("url", qURL); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
