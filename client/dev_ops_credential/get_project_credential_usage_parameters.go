// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetProjectCredentialUsageParams creates a new GetProjectCredentialUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetProjectCredentialUsageParams() *GetProjectCredentialUsageParams {
	return &GetProjectCredentialUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetProjectCredentialUsageParamsWithTimeout creates a new GetProjectCredentialUsageParams object
// with the ability to set a timeout on a request.
func NewGetProjectCredentialUsageParamsWithTimeout(timeout time.Duration) *GetProjectCredentialUsageParams {
	return &GetProjectCredentialUsageParams{
		timeout: timeout,
	}
}

// NewGetProjectCredentialUsageParamsWithContext creates a new GetProjectCredentialUsageParams object
// with the ability to set a context for a request.
func NewGetProjectCredentialUsageParamsWithContext(ctx context.Context) *GetProjectCredentialUsageParams {
	return &GetProjectCredentialUsageParams{
		Context: ctx,
	}
}

// NewGetProjectCredentialUsageParamsWithHTTPClient creates a new GetProjectCredentialUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetProjectCredentialUsageParamsWithHTTPClient(client *http.Client) *GetProjectCredentialUsageParams {
	return &GetProjectCredentialUsageParams{
		HTTPClient: client,
	}
}

/*
GetProjectCredentialUsageParams contains all the parameters to send to the API endpoint

	for the get project credential usage operation.

	Typically these are written to a http.Request.
*/
type GetProjectCredentialUsageParams struct {

	/* Credential.

	   credential's ID, e.g. dockerhub-id
	*/
	Credential string

	/* Devops.

	   DevOps project's ID, e.g. project-RRRRAzLBlLEm
	*/
	Devops string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get project credential usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProjectCredentialUsageParams) WithDefaults() *GetProjectCredentialUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get project credential usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetProjectCredentialUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get project credential usage params
func (o *GetProjectCredentialUsageParams) WithTimeout(timeout time.Duration) *GetProjectCredentialUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get project credential usage params
func (o *GetProjectCredentialUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get project credential usage params
func (o *GetProjectCredentialUsageParams) WithContext(ctx context.Context) *GetProjectCredentialUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get project credential usage params
func (o *GetProjectCredentialUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get project credential usage params
func (o *GetProjectCredentialUsageParams) WithHTTPClient(client *http.Client) *GetProjectCredentialUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get project credential usage params
func (o *GetProjectCredentialUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredential adds the credential to the get project credential usage params
func (o *GetProjectCredentialUsageParams) WithCredential(credential string) *GetProjectCredentialUsageParams {
	o.SetCredential(credential)
	return o
}

// SetCredential adds the credential to the get project credential usage params
func (o *GetProjectCredentialUsageParams) SetCredential(credential string) {
	o.Credential = credential
}

// WithDevops adds the devops to the get project credential usage params
func (o *GetProjectCredentialUsageParams) WithDevops(devops string) *GetProjectCredentialUsageParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the get project credential usage params
func (o *GetProjectCredentialUsageParams) SetDevops(devops string) {
	o.Devops = devops
}

// WriteToRequest writes these params to a swagger request
func (o *GetProjectCredentialUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param credential
	if err := r.SetPathParam("credential", o.Credential); err != nil {
		return err
	}

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
