// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_credential

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListCredentialParams creates a new ListCredentialParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCredentialParams() *ListCredentialParams {
	return &ListCredentialParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCredentialParamsWithTimeout creates a new ListCredentialParams object
// with the ability to set a timeout on a request.
func NewListCredentialParamsWithTimeout(timeout time.Duration) *ListCredentialParams {
	return &ListCredentialParams{
		timeout: timeout,
	}
}

// NewListCredentialParamsWithContext creates a new ListCredentialParams object
// with the ability to set a context for a request.
func NewListCredentialParamsWithContext(ctx context.Context) *ListCredentialParams {
	return &ListCredentialParams{
		Context: ctx,
	}
}

// NewListCredentialParamsWithHTTPClient creates a new ListCredentialParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCredentialParamsWithHTTPClient(client *http.Client) *ListCredentialParams {
	return &ListCredentialParams{
		HTTPClient: client,
	}
}

/*
ListCredentialParams contains all the parameters to send to the API endpoint

	for the list credential operation.

	Typically these are written to a http.Request.
*/
type ListCredentialParams struct {

	/* Ascending.

	   sort parameters, e.g. ascending=false

	   Default: "ascending=false"
	*/
	Ascending *string

	/* Devops.

	   devops name
	*/
	Devops string

	/* Limit.

	   limit
	*/
	Limit *string

	/* Name.

	   name used to do filtering
	*/
	Name *string

	/* Page.

	   page

	   Format: page=%d
	   Default: "page=1"
	*/
	Page *string

	/* SortBy.

	   sort parameters, e.g. orderBy=createTime
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list credential params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCredentialParams) WithDefaults() *ListCredentialParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list credential params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCredentialParams) SetDefaults() {
	var (
		ascendingDefault = string("ascending=false")

		pageDefault = string("page=1")
	)

	val := ListCredentialParams{
		Ascending: &ascendingDefault,
		Page:      &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list credential params
func (o *ListCredentialParams) WithTimeout(timeout time.Duration) *ListCredentialParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list credential params
func (o *ListCredentialParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list credential params
func (o *ListCredentialParams) WithContext(ctx context.Context) *ListCredentialParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list credential params
func (o *ListCredentialParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list credential params
func (o *ListCredentialParams) WithHTTPClient(client *http.Client) *ListCredentialParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list credential params
func (o *ListCredentialParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAscending adds the ascending to the list credential params
func (o *ListCredentialParams) WithAscending(ascending *string) *ListCredentialParams {
	o.SetAscending(ascending)
	return o
}

// SetAscending adds the ascending to the list credential params
func (o *ListCredentialParams) SetAscending(ascending *string) {
	o.Ascending = ascending
}

// WithDevops adds the devops to the list credential params
func (o *ListCredentialParams) WithDevops(devops string) *ListCredentialParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the list credential params
func (o *ListCredentialParams) SetDevops(devops string) {
	o.Devops = devops
}

// WithLimit adds the limit to the list credential params
func (o *ListCredentialParams) WithLimit(limit *string) *ListCredentialParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list credential params
func (o *ListCredentialParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithName adds the name to the list credential params
func (o *ListCredentialParams) WithName(name *string) *ListCredentialParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list credential params
func (o *ListCredentialParams) SetName(name *string) {
	o.Name = name
}

// WithPage adds the page to the list credential params
func (o *ListCredentialParams) WithPage(page *string) *ListCredentialParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list credential params
func (o *ListCredentialParams) SetPage(page *string) {
	o.Page = page
}

// WithSortBy adds the sortBy to the list credential params
func (o *ListCredentialParams) WithSortBy(sortBy *string) *ListCredentialParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list credential params
func (o *ListCredentialParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListCredentialParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ascending != nil {

		// query param ascending
		var qrAscending string

		if o.Ascending != nil {
			qrAscending = *o.Ascending
		}
		qAscending := qrAscending
		if qAscending != "" {

			if err := r.SetQueryParam("ascending", qAscending); err != nil {
				return err
			}
		}
	}

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
