// Code generated by go-swagger; DO NOT EDIT.

package git_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteFilesParams creates a new DeleteFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteFilesParams() *DeleteFilesParams {
	return &DeleteFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteFilesParamsWithTimeout creates a new DeleteFilesParams object
// with the ability to set a timeout on a request.
func NewDeleteFilesParamsWithTimeout(timeout time.Duration) *DeleteFilesParams {
	return &DeleteFilesParams{
		timeout: timeout,
	}
}

// NewDeleteFilesParamsWithContext creates a new DeleteFilesParams object
// with the ability to set a context for a request.
func NewDeleteFilesParamsWithContext(ctx context.Context) *DeleteFilesParams {
	return &DeleteFilesParams{
		Context: ctx,
	}
}

// NewDeleteFilesParamsWithHTTPClient creates a new DeleteFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteFilesParamsWithHTTPClient(client *http.Client) *DeleteFilesParams {
	return &DeleteFilesParams{
		HTTPClient: client,
	}
}

/*
DeleteFilesParams contains all the parameters to send to the API endpoint

	for the delete files operation.

	Typically these are written to a http.Request.
*/
type DeleteFilesParams struct {

	/* Branch.

	   The branch of git repository
	*/
	Branch string

	/* File.

	   must be a directory and ends with '/'
	*/
	File []string

	/* Gitrepository.

	   The GitRepository customs resource
	*/
	Gitrepository string

	/* Message.

	   the commit message
	*/
	Message string

	/* Namespace.

	   The namespace name
	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteFilesParams) WithDefaults() *DeleteFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteFilesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete files params
func (o *DeleteFilesParams) WithTimeout(timeout time.Duration) *DeleteFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete files params
func (o *DeleteFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete files params
func (o *DeleteFilesParams) WithContext(ctx context.Context) *DeleteFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete files params
func (o *DeleteFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete files params
func (o *DeleteFilesParams) WithHTTPClient(client *http.Client) *DeleteFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete files params
func (o *DeleteFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the delete files params
func (o *DeleteFilesParams) WithBranch(branch string) *DeleteFilesParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the delete files params
func (o *DeleteFilesParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithFile adds the file to the delete files params
func (o *DeleteFilesParams) WithFile(file []string) *DeleteFilesParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the delete files params
func (o *DeleteFilesParams) SetFile(file []string) {
	o.File = file
}

// WithGitrepository adds the gitrepository to the delete files params
func (o *DeleteFilesParams) WithGitrepository(gitrepository string) *DeleteFilesParams {
	o.SetGitrepository(gitrepository)
	return o
}

// SetGitrepository adds the gitrepository to the delete files params
func (o *DeleteFilesParams) SetGitrepository(gitrepository string) {
	o.Gitrepository = gitrepository
}

// WithMessage adds the message to the delete files params
func (o *DeleteFilesParams) WithMessage(message string) *DeleteFilesParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the delete files params
func (o *DeleteFilesParams) SetMessage(message string) {
	o.Message = message
}

// WithNamespace adds the namespace to the delete files params
func (o *DeleteFilesParams) WithNamespace(namespace string) *DeleteFilesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the delete files params
func (o *DeleteFilesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	if o.File != nil {

		// binding items for file
		joinedFile := o.bindParamFile(reg)

		// query array param file
		if err := r.SetQueryParam("file", joinedFile...); err != nil {
			return err
		}
	}

	// path param gitrepository
	if err := r.SetPathParam("gitrepository", o.Gitrepository); err != nil {
		return err
	}

	// query param message
	qrMessage := o.Message
	qMessage := qrMessage
	if qMessage != "" {

		if err := r.SetQueryParam("message", qMessage); err != nil {
			return err
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamDeleteFiles binds the parameter file
func (o *DeleteFilesParams) bindParamFile(formats strfmt.Registry) []string {
	fileIR := o.File

	var fileIC []string
	for _, fileIIR := range fileIR { // explode []string

		fileIIV := fileIIR // string as string
		fileIC = append(fileIC, fileIIV)
	}

	// items.CollectionFormat: "csv"
	fileIS := swag.JoinByFormat(fileIC, "csv")

	return fileIS
}
