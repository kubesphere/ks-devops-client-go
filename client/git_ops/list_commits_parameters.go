// Code generated by go-swagger; DO NOT EDIT.

package git_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListCommitsParams creates a new ListCommitsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCommitsParams() *ListCommitsParams {
	return &ListCommitsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCommitsParamsWithTimeout creates a new ListCommitsParams object
// with the ability to set a timeout on a request.
func NewListCommitsParamsWithTimeout(timeout time.Duration) *ListCommitsParams {
	return &ListCommitsParams{
		timeout: timeout,
	}
}

// NewListCommitsParamsWithContext creates a new ListCommitsParams object
// with the ability to set a context for a request.
func NewListCommitsParamsWithContext(ctx context.Context) *ListCommitsParams {
	return &ListCommitsParams{
		Context: ctx,
	}
}

// NewListCommitsParamsWithHTTPClient creates a new ListCommitsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCommitsParamsWithHTTPClient(client *http.Client) *ListCommitsParams {
	return &ListCommitsParams{
		HTTPClient: client,
	}
}

/*
ListCommitsParams contains all the parameters to send to the API endpoint

	for the list commits operation.

	Typically these are written to a http.Request.
*/
type ListCommitsParams struct {

	/* Branch.

	   The branch of git repository
	*/
	Branch string

	/* File.

	   must be a directory and ends with '/'
	*/
	File []string

	/* Gitrepository.

	   The GitRepository customs resource
	*/
	Gitrepository string

	/* Limit.

	   limit
	*/
	Limit *string

	/* Namespace.

	   The namespace name
	*/
	Namespace string

	/* Page.

	   page

	   Format: page=%d
	   Default: "page=1"
	*/
	Page *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list commits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCommitsParams) WithDefaults() *ListCommitsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list commits params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCommitsParams) SetDefaults() {
	var (
		pageDefault = string("page=1")
	)

	val := ListCommitsParams{
		Page: &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list commits params
func (o *ListCommitsParams) WithTimeout(timeout time.Duration) *ListCommitsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list commits params
func (o *ListCommitsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list commits params
func (o *ListCommitsParams) WithContext(ctx context.Context) *ListCommitsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list commits params
func (o *ListCommitsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list commits params
func (o *ListCommitsParams) WithHTTPClient(client *http.Client) *ListCommitsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list commits params
func (o *ListCommitsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the list commits params
func (o *ListCommitsParams) WithBranch(branch string) *ListCommitsParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the list commits params
func (o *ListCommitsParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithFile adds the file to the list commits params
func (o *ListCommitsParams) WithFile(file []string) *ListCommitsParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the list commits params
func (o *ListCommitsParams) SetFile(file []string) {
	o.File = file
}

// WithGitrepository adds the gitrepository to the list commits params
func (o *ListCommitsParams) WithGitrepository(gitrepository string) *ListCommitsParams {
	o.SetGitrepository(gitrepository)
	return o
}

// SetGitrepository adds the gitrepository to the list commits params
func (o *ListCommitsParams) SetGitrepository(gitrepository string) {
	o.Gitrepository = gitrepository
}

// WithLimit adds the limit to the list commits params
func (o *ListCommitsParams) WithLimit(limit *string) *ListCommitsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list commits params
func (o *ListCommitsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the list commits params
func (o *ListCommitsParams) WithNamespace(namespace string) *ListCommitsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list commits params
func (o *ListCommitsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPage adds the page to the list commits params
func (o *ListCommitsParams) WithPage(page *string) *ListCommitsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list commits params
func (o *ListCommitsParams) SetPage(page *string) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *ListCommitsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	if o.File != nil {

		// binding items for file
		joinedFile := o.bindParamFile(reg)

		// query array param file
		if err := r.SetQueryParam("file", joinedFile...); err != nil {
			return err
		}
	}

	// path param gitrepository
	if err := r.SetPathParam("gitrepository", o.Gitrepository); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListCommits binds the parameter file
func (o *ListCommitsParams) bindParamFile(formats strfmt.Registry) []string {
	fileIR := o.File

	var fileIC []string
	for _, fileIIR := range fileIR { // explode []string

		fileIIV := fileIIR // string as string
		fileIC = append(fileIC, fileIIV)
	}

	// items.CollectionFormat: "csv"
	fileIS := swag.JoinByFormat(fileIC, "csv")

	return fileIS
}
