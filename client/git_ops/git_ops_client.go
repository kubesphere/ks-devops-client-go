// Code generated by go-swagger; DO NOT EDIT.

package git_ops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new git ops API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new git ops API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new git ops API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for git ops API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeMultipartFormData sets the Content-Type header to "multipart/form-data".
func WithContentTypeMultipartFormData(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"multipart/form-data"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddFiles(params *AddFilesParams, opts ...ClientOption) (*AddFilesOK, error)

	CheckOutBranch(params *CheckOutBranchParams, opts ...ClientOption) (*CheckOutBranchOK, error)

	CleanAndPullBranch(params *CleanAndPullBranchParams, opts ...ClientOption) (*CleanAndPullBranchOK, error)

	DeleteFiles(params *DeleteFilesParams, opts ...ClientOption) (*DeleteFilesOK, error)

	DownloadFileFromBranch(params *DownloadFileFromBranchParams, opts ...ClientOption) (*DownloadFileFromBranchOK, error)

	DownloadFileFromCommit(params *DownloadFileFromCommitParams, opts ...ClientOption) (*DownloadFileFromCommitOK, error)

	GetBranch(params *GetBranchParams, opts ...ClientOption) (*GetBranchOK, error)

	GetCommit(params *GetCommitParams, opts ...ClientOption) (*GetCommitOK, error)

	GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error)

	GetFileFromBranch(params *GetFileFromBranchParams, opts ...ClientOption) (*GetFileFromBranchOK, error)

	GetFileFromCommit(params *GetFileFromCommitParams, opts ...ClientOption) (*GetFileFromCommitOK, error)

	ListBranches(params *ListBranchesParams, opts ...ClientOption) (*ListBranchesOK, error)

	ListCommits(params *ListCommitsParams, opts ...ClientOption) (*ListCommitsOK, error)

	ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error)

	UpdateConfig(params *UpdateConfigParams, opts ...ClientOption) (*UpdateConfigOK, error)

	UploadFiles(params *UploadFilesParams, opts ...ClientOption) (*UploadFilesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddFiles adds files in the branch file content can either be passed by the request payload or use the uploaded files by specify uploaded true

when unpack is true, only the first file of files will be used and it must be a tar gzip archive.
*/
func (a *Client) AddFiles(params *AddFilesParams, opts ...ClientOption) (*AddFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AddFiles",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckOutBranch checkouts branch
*/
func (a *Client) CheckOutBranch(params *CheckOutBranchParams, opts ...ClientOption) (*CheckOutBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckOutBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CheckOutBranch",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/checkouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckOutBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckOutBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckOutBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CleanAndPullBranch cleans and pull branch
*/
func (a *Client) CleanAndPullBranch(params *CleanAndPullBranchParams, opts ...ClientOption) (*CleanAndPullBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanAndPullBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CleanAndPullBranch",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/pulls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CleanAndPullBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CleanAndPullBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CleanAndPullBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteFiles deletes files in the branch
*/
func (a *Client) DeleteFiles(params *DeleteFilesParams, opts ...ClientOption) (*DeleteFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteFiles",
		Method:             "DELETE",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadFileFromBranch downloads file from branch
*/
func (a *Client) DownloadFileFromBranch(params *DownloadFileFromBranchParams, opts ...ClientOption) (*DownloadFileFromBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileFromBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadFileFromBranch",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/rawfiles/{file}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadFileFromBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadFileFromBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadFileFromBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadFileFromCommit downloads file from commit
*/
func (a *Client) DownloadFileFromCommit(params *DownloadFileFromCommitParams, opts ...ClientOption) (*DownloadFileFromCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadFileFromCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DownloadFileFromCommit",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/commits/{commit}/rawfiles/{file}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadFileFromCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadFileFromCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DownloadFileFromCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranch gets branch info
*/
func (a *Client) GetBranch(params *GetBranchParams, opts ...ClientOption) (*GetBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranch",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCommit gets commit like git show
*/
func (a *Client) GetCommit(params *GetCommitParams, opts ...ClientOption) (*GetCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCommit",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/commits/{commit}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfig gets git config git config
*/
func (a *Client) GetConfig(params *GetConfigParams, opts ...ClientOption) (*GetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConfig",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/configs/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileFromBranch gets file from branch
*/
func (a *Client) GetFileFromBranch(params *GetFileFromBranchParams, opts ...ClientOption) (*GetFileFromBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileFromBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileFromBranch",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/files/{file}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileFromBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileFromBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFileFromBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetFileFromCommit gets file from commit
*/
func (a *Client) GetFileFromCommit(params *GetFileFromCommitParams, opts ...ClientOption) (*GetFileFromCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileFromCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetFileFromCommit",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/commits/{commit}/files/{file}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFileFromCommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileFromCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetFileFromCommit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBranches lists branches for git repository like git branch r
*/
func (a *Client) ListBranches(params *ListBranchesParams, opts ...ClientOption) (*ListBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListBranches",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBranchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListCommits lists commits like git log
*/
func (a *Client) ListCommits(params *ListCommitsParams, opts ...ClientOption) (*ListCommitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCommitsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListCommits",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListCommitsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListCommitsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListCommits: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListFiles lists files in the branch
*/
func (a *Client) ListFiles(params *ListFilesParams, opts ...ClientOption) (*ListFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListFiles",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/branches/{branch}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateConfig updates git config
*/
func (a *Client) UpdateConfig(params *UpdateConfigParams, opts ...ClientOption) (*UpdateConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateConfig",
		Method:             "PUT",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/configs/default",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConfig: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UploadFiles uploads files by multipart form data up to 10 files can be passed in the form you must call add files later to commit the files
*/
func (a *Client) UploadFiles(params *UploadFilesParams, opts ...ClientOption) (*UploadFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UploadFiles",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}/uploads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UploadFilesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UploadFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UploadFiles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
