// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kubesphere/ks-devops-client-go/models"
)

// NewUpdateGitRepositoriesParams creates a new UpdateGitRepositoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateGitRepositoriesParams() *UpdateGitRepositoriesParams {
	return &UpdateGitRepositoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateGitRepositoriesParamsWithTimeout creates a new UpdateGitRepositoriesParams object
// with the ability to set a timeout on a request.
func NewUpdateGitRepositoriesParamsWithTimeout(timeout time.Duration) *UpdateGitRepositoriesParams {
	return &UpdateGitRepositoriesParams{
		timeout: timeout,
	}
}

// NewUpdateGitRepositoriesParamsWithContext creates a new UpdateGitRepositoriesParams object
// with the ability to set a context for a request.
func NewUpdateGitRepositoriesParamsWithContext(ctx context.Context) *UpdateGitRepositoriesParams {
	return &UpdateGitRepositoriesParams{
		Context: ctx,
	}
}

// NewUpdateGitRepositoriesParamsWithHTTPClient creates a new UpdateGitRepositoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateGitRepositoriesParamsWithHTTPClient(client *http.Client) *UpdateGitRepositoriesParams {
	return &UpdateGitRepositoriesParams{
		HTTPClient: client,
	}
}

/*
UpdateGitRepositoriesParams contains all the parameters to send to the API endpoint

	for the update git repositories operation.

	Typically these are written to a http.Request.
*/
type UpdateGitRepositoriesParams struct {

	// Body.
	Body *models.V1alpha3GitRepository

	/* Gitrepository.

	   The GitRepository customs resource
	*/
	Gitrepository string

	/* Namespace.

	   The namespace name
	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateGitRepositoriesParams) WithDefaults() *UpdateGitRepositoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateGitRepositoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithTimeout(timeout time.Duration) *UpdateGitRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithContext(ctx context.Context) *UpdateGitRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithHTTPClient(client *http.Client) *UpdateGitRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithBody(body *models.V1alpha3GitRepository) *UpdateGitRepositoriesParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetBody(body *models.V1alpha3GitRepository) {
	o.Body = body
}

// WithGitrepository adds the gitrepository to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithGitrepository(gitrepository string) *UpdateGitRepositoriesParams {
	o.SetGitrepository(gitrepository)
	return o
}

// SetGitrepository adds the gitrepository to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetGitrepository(gitrepository string) {
	o.Gitrepository = gitrepository
}

// WithNamespace adds the namespace to the update git repositories params
func (o *UpdateGitRepositoriesParams) WithNamespace(namespace string) *UpdateGitRepositoriesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the update git repositories params
func (o *UpdateGitRepositoriesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateGitRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param gitrepository
	if err := r.SetPathParam("gitrepository", o.Gitrepository); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
