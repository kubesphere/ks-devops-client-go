// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRepositoriesParams creates a new ListRepositoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListRepositoriesParams() *ListRepositoriesParams {
	return &ListRepositoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListRepositoriesParamsWithTimeout creates a new ListRepositoriesParams object
// with the ability to set a timeout on a request.
func NewListRepositoriesParamsWithTimeout(timeout time.Duration) *ListRepositoriesParams {
	return &ListRepositoriesParams{
		timeout: timeout,
	}
}

// NewListRepositoriesParamsWithContext creates a new ListRepositoriesParams object
// with the ability to set a context for a request.
func NewListRepositoriesParamsWithContext(ctx context.Context) *ListRepositoriesParams {
	return &ListRepositoriesParams{
		Context: ctx,
	}
}

// NewListRepositoriesParamsWithHTTPClient creates a new ListRepositoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListRepositoriesParamsWithHTTPClient(client *http.Client) *ListRepositoriesParams {
	return &ListRepositoriesParams{
		HTTPClient: client,
	}
}

/*
ListRepositoriesParams contains all the parameters to send to the API endpoint

	for the list repositories operation.

	Typically these are written to a http.Request.
*/
type ListRepositoriesParams struct {

	/* Organization.

	   The git provider organization. For a GitHub repository address: https://github.com/kubesphere/ks-devops. kubesphere is the organization name
	*/
	Organization string

	/* PageNumber.

	   The number of paging
	*/
	PageNumber *int64

	/* PageSize.

	   The size of each paging data
	*/
	PageSize *int64

	/* Scm.

	   the SCM type
	*/
	Scm string

	/* Secret.

	   the secret name
	*/
	Secret string

	/* SecretNamespace.

	   the namespace of target secret
	*/
	SecretNamespace string

	/* Server.

	   The address of a self-hosted scm provider
	*/
	Server *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRepositoriesParams) WithDefaults() *ListRepositoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListRepositoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list repositories params
func (o *ListRepositoriesParams) WithTimeout(timeout time.Duration) *ListRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list repositories params
func (o *ListRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list repositories params
func (o *ListRepositoriesParams) WithContext(ctx context.Context) *ListRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list repositories params
func (o *ListRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list repositories params
func (o *ListRepositoriesParams) WithHTTPClient(client *http.Client) *ListRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list repositories params
func (o *ListRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganization adds the organization to the list repositories params
func (o *ListRepositoriesParams) WithOrganization(organization string) *ListRepositoriesParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the list repositories params
func (o *ListRepositoriesParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPageNumber adds the pageNumber to the list repositories params
func (o *ListRepositoriesParams) WithPageNumber(pageNumber *int64) *ListRepositoriesParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the list repositories params
func (o *ListRepositoriesParams) SetPageNumber(pageNumber *int64) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the list repositories params
func (o *ListRepositoriesParams) WithPageSize(pageSize *int64) *ListRepositoriesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list repositories params
func (o *ListRepositoriesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithScm adds the scm to the list repositories params
func (o *ListRepositoriesParams) WithScm(scm string) *ListRepositoriesParams {
	o.SetScm(scm)
	return o
}

// SetScm adds the scm to the list repositories params
func (o *ListRepositoriesParams) SetScm(scm string) {
	o.Scm = scm
}

// WithSecret adds the secret to the list repositories params
func (o *ListRepositoriesParams) WithSecret(secret string) *ListRepositoriesParams {
	o.SetSecret(secret)
	return o
}

// SetSecret adds the secret to the list repositories params
func (o *ListRepositoriesParams) SetSecret(secret string) {
	o.Secret = secret
}

// WithSecretNamespace adds the secretNamespace to the list repositories params
func (o *ListRepositoriesParams) WithSecretNamespace(secretNamespace string) *ListRepositoriesParams {
	o.SetSecretNamespace(secretNamespace)
	return o
}

// SetSecretNamespace adds the secretNamespace to the list repositories params
func (o *ListRepositoriesParams) SetSecretNamespace(secretNamespace string) {
	o.SecretNamespace = secretNamespace
}

// WithServer adds the server to the list repositories params
func (o *ListRepositoriesParams) WithServer(server *string) *ListRepositoriesParams {
	o.SetServer(server)
	return o
}

// SetServer adds the server to the list repositories params
func (o *ListRepositoriesParams) SetServer(server *string) {
	o.Server = server
}

// WriteToRequest writes these params to a swagger request
func (o *ListRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	if o.PageNumber != nil {

		// query param pageNumber
		var qrPageNumber int64

		if o.PageNumber != nil {
			qrPageNumber = *o.PageNumber
		}
		qPageNumber := swag.FormatInt64(qrPageNumber)
		if qPageNumber != "" {

			if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param scm
	if err := r.SetPathParam("scm", o.Scm); err != nil {
		return err
	}

	// query param secret
	qrSecret := o.Secret
	qSecret := qrSecret
	if qSecret != "" {

		if err := r.SetQueryParam("secret", qSecret); err != nil {
			return err
		}
	}

	// query param secretNamespace
	qrSecretNamespace := o.SecretNamespace
	qSecretNamespace := qrSecretNamespace
	if qSecretNamespace != "" {

		if err := r.SetQueryParam("secretNamespace", qSecretNamespace); err != nil {
			return err
		}
	}

	if o.Server != nil {

		// query param server
		var qrServer string

		if o.Server != nil {
			qrServer = *o.Server
		}
		qServer := qrServer
		if qServer != "" {

			if err := r.SetQueryParam("server", qServer); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
