// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListOrganizationsParams creates a new ListOrganizationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListOrganizationsParams() *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListOrganizationsParamsWithTimeout creates a new ListOrganizationsParams object
// with the ability to set a timeout on a request.
func NewListOrganizationsParamsWithTimeout(timeout time.Duration) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		timeout: timeout,
	}
}

// NewListOrganizationsParamsWithContext creates a new ListOrganizationsParams object
// with the ability to set a context for a request.
func NewListOrganizationsParamsWithContext(ctx context.Context) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		Context: ctx,
	}
}

// NewListOrganizationsParamsWithHTTPClient creates a new ListOrganizationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListOrganizationsParamsWithHTTPClient(client *http.Client) *ListOrganizationsParams {
	return &ListOrganizationsParams{
		HTTPClient: client,
	}
}

/*
ListOrganizationsParams contains all the parameters to send to the API endpoint

	for the list organizations operation.

	Typically these are written to a http.Request.
*/
type ListOrganizationsParams struct {

	/* Ascending.

	   sort parameters, e.g. ascending=false

	   Default: "ascending=false"
	*/
	Ascending *string

	/* IncludeUser.

	   Indicate if you want to include the current user

	   Default: true
	*/
	IncludeUser *bool

	/* Limit.

	   limit
	*/
	Limit *string

	/* Page.

	   page

	   Format: page=%d
	   Default: "page=1"
	*/
	Page *string

	/* Scm.

	   the SCM type
	*/
	Scm string

	/* Secret.

	   the secret name
	*/
	Secret string

	/* SecretNamespace.

	   the namespace of target secret
	*/
	SecretNamespace string

	/* Server.

	   The address of a self-hosted scm provider
	*/
	Server *string

	/* SortBy.

	   sort parameters, e.g. orderBy=createTime
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) WithDefaults() *ListOrganizationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list organizations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListOrganizationsParams) SetDefaults() {
	var (
		ascendingDefault = string("ascending=false")

		includeUserDefault = bool(true)

		pageDefault = string("page=1")
	)

	val := ListOrganizationsParams{
		Ascending:   &ascendingDefault,
		IncludeUser: &includeUserDefault,
		Page:        &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) WithTimeout(timeout time.Duration) *ListOrganizationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list organizations params
func (o *ListOrganizationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list organizations params
func (o *ListOrganizationsParams) WithContext(ctx context.Context) *ListOrganizationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list organizations params
func (o *ListOrganizationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) WithHTTPClient(client *http.Client) *ListOrganizationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list organizations params
func (o *ListOrganizationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAscending adds the ascending to the list organizations params
func (o *ListOrganizationsParams) WithAscending(ascending *string) *ListOrganizationsParams {
	o.SetAscending(ascending)
	return o
}

// SetAscending adds the ascending to the list organizations params
func (o *ListOrganizationsParams) SetAscending(ascending *string) {
	o.Ascending = ascending
}

// WithIncludeUser adds the includeUser to the list organizations params
func (o *ListOrganizationsParams) WithIncludeUser(includeUser *bool) *ListOrganizationsParams {
	o.SetIncludeUser(includeUser)
	return o
}

// SetIncludeUser adds the includeUser to the list organizations params
func (o *ListOrganizationsParams) SetIncludeUser(includeUser *bool) {
	o.IncludeUser = includeUser
}

// WithLimit adds the limit to the list organizations params
func (o *ListOrganizationsParams) WithLimit(limit *string) *ListOrganizationsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list organizations params
func (o *ListOrganizationsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithPage adds the page to the list organizations params
func (o *ListOrganizationsParams) WithPage(page *string) *ListOrganizationsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list organizations params
func (o *ListOrganizationsParams) SetPage(page *string) {
	o.Page = page
}

// WithScm adds the scm to the list organizations params
func (o *ListOrganizationsParams) WithScm(scm string) *ListOrganizationsParams {
	o.SetScm(scm)
	return o
}

// SetScm adds the scm to the list organizations params
func (o *ListOrganizationsParams) SetScm(scm string) {
	o.Scm = scm
}

// WithSecret adds the secret to the list organizations params
func (o *ListOrganizationsParams) WithSecret(secret string) *ListOrganizationsParams {
	o.SetSecret(secret)
	return o
}

// SetSecret adds the secret to the list organizations params
func (o *ListOrganizationsParams) SetSecret(secret string) {
	o.Secret = secret
}

// WithSecretNamespace adds the secretNamespace to the list organizations params
func (o *ListOrganizationsParams) WithSecretNamespace(secretNamespace string) *ListOrganizationsParams {
	o.SetSecretNamespace(secretNamespace)
	return o
}

// SetSecretNamespace adds the secretNamespace to the list organizations params
func (o *ListOrganizationsParams) SetSecretNamespace(secretNamespace string) {
	o.SecretNamespace = secretNamespace
}

// WithServer adds the server to the list organizations params
func (o *ListOrganizationsParams) WithServer(server *string) *ListOrganizationsParams {
	o.SetServer(server)
	return o
}

// SetServer adds the server to the list organizations params
func (o *ListOrganizationsParams) SetServer(server *string) {
	o.Server = server
}

// WithSortBy adds the sortBy to the list organizations params
func (o *ListOrganizationsParams) WithSortBy(sortBy *string) *ListOrganizationsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list organizations params
func (o *ListOrganizationsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *ListOrganizationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ascending != nil {

		// query param ascending
		var qrAscending string

		if o.Ascending != nil {
			qrAscending = *o.Ascending
		}
		qAscending := qrAscending
		if qAscending != "" {

			if err := r.SetQueryParam("ascending", qAscending); err != nil {
				return err
			}
		}
	}

	if o.IncludeUser != nil {

		// query param includeUser
		var qrIncludeUser bool

		if o.IncludeUser != nil {
			qrIncludeUser = *o.IncludeUser
		}
		qIncludeUser := swag.FormatBool(qrIncludeUser)
		if qIncludeUser != "" {

			if err := r.SetQueryParam("includeUser", qIncludeUser); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param scm
	if err := r.SetPathParam("scm", o.Scm); err != nil {
		return err
	}

	// query param secret
	qrSecret := o.Secret
	qSecret := qrSecret
	if qSecret != "" {

		if err := r.SetQueryParam("secret", qSecret); err != nil {
			return err
		}
	}

	// query param secretNamespace
	qrSecretNamespace := o.SecretNamespace
	qSecretNamespace := qrSecretNamespace
	if qSecretNamespace != "" {

		if err := r.SetQueryParam("secretNamespace", qSecretNamespace); err != nil {
			return err
		}
	}

	if o.Server != nil {

		// query param server
		var qrServer string

		if o.Server != nil {
			qrServer = *o.Server
		}
		qServer := qrServer
		if qServer != "" {

			if err := r.SetQueryParam("server", qServer); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
