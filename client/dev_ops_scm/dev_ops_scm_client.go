// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dev ops scm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dev ops scm API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dev ops scm API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dev ops scm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSCMServers(params *CreateSCMServersParams, opts ...ClientOption) (*CreateSCMServersOK, error)

	GetOrgRepo(params *GetOrgRepoParams, opts ...ClientOption) (*GetOrgRepoOK, error)

	GetSCMOrg(params *GetSCMOrgParams, opts ...ClientOption) (*GetSCMOrgOK, error)

	GetSCMServers(params *GetSCMServersParams, opts ...ClientOption) (*GetSCMServersOK, error)

	Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error)

	CreateGitRepositories(params *CreateGitRepositoriesParams, opts ...ClientOption) (*CreateGitRepositoriesOK, error)

	DeleteGitRepositories(params *DeleteGitRepositoriesParams, opts ...ClientOption) (*DeleteGitRepositoriesOK, error)

	GetGitRepository(params *GetGitRepositoryParams, opts ...ClientOption) (*GetGitRepositoryOK, error)

	ListGitRepositories(params *ListGitRepositoriesParams, opts ...ClientOption) (*ListGitRepositoriesOK, error)

	ListOrganizations(params *ListOrganizationsParams, opts ...ClientOption) (*ListOrganizationsOK, error)

	ListRepositories(params *ListRepositoriesParams, opts ...ClientOption) (*ListRepositoriesOK, error)

	UpdateGitRepositories(params *UpdateGitRepositoriesParams, opts ...ClientOption) (*UpdateGitRepositoriesOK, error)

	Verify(params *VerifyParams, opts ...ClientOption) (*VerifyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSCMServers creates scm server if it does not exist in the jenkins
*/
func (a *Client) CreateSCMServers(params *CreateSCMServersParams, opts ...ClientOption) (*CreateSCMServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSCMServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateSCMServers",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSCMServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSCMServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSCMServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOrgRepo lists all repositories in the specified organization
*/
func (a *Client) GetOrgRepo(params *GetOrgRepoParams, opts ...ClientOption) (*GetOrgRepoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrgRepoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetOrgRepo",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations/{organization}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrgRepoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrgRepoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetOrgRepo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSCMOrg lists all organizations of the specified source configuration management s c m such as github
*/
func (a *Client) GetSCMOrg(params *GetSCMOrgParams, opts ...ClientOption) (*GetSCMOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSCMOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSCMOrg",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSCMOrgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSCMOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSCMOrg: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSCMServers lists all servers in the jenkins
*/
func (a *Client) GetSCMServers(params *GetSCMServersParams, opts ...ClientOption) (*GetSCMServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSCMServersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetSCMServers",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSCMServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSCMServersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSCMServers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Validate validates the access token of the specified source configuration management s c m such as github
*/
func (a *Client) Validate(params *ValidateParams, opts ...ClientOption) (*ValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Validate",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/scms/{scm}/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Validate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateGitRepositories lists all the git repositories
*/
func (a *Client) CreateGitRepositories(params *CreateGitRepositoriesParams, opts ...ClientOption) (*CreateGitRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createGitRepositories",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateGitRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGitRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createGitRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGitRepositories deletes a git repository by name
*/
func (a *Client) DeleteGitRepositories(params *DeleteGitRepositoriesParams, opts ...ClientOption) (*DeleteGitRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGitRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteGitRepositories",
		Method:             "DELETE",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteGitRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGitRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteGitRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitRepository gets a git repository by name
*/
func (a *Client) GetGitRepository(params *GetGitRepositoryParams, opts ...ClientOption) (*GetGitRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitRepositoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getGitRepository",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetGitRepositoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGitRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getGitRepository: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGitRepositories lists all the git repositories
*/
func (a *Client) ListGitRepositories(params *ListGitRepositoriesParams, opts ...ClientOption) (*ListGitRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGitRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listGitRepositories",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListGitRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListGitRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listGitRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOrganizations lists all the readable organizations
*/
func (a *Client) ListOrganizations(params *ListOrganizationsParams, opts ...ClientOption) (*ListOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOrganizationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOrganizations",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/scms/{scm}/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListOrganizationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listOrganizations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRepositories lists all the readable repositories
*/
func (a *Client) ListRepositories(params *ListRepositoriesParams, opts ...ClientOption) (*ListRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRepositories",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/scms/{scm}/organizations/{organization}/repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitRepositories updates a git repositories
*/
func (a *Client) UpdateGitRepositories(params *UpdateGitRepositoriesParams, opts ...ClientOption) (*UpdateGitRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateGitRepositories",
		Method:             "PUT",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/gitrepositories/{gitrepository}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateGitRepositoriesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGitRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateGitRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Verify verifies the token of different git providers
*/
func (a *Client) Verify(params *VerifyParams, opts ...ClientOption) (*VerifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "verify",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/scms/{scm}/verify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &VerifyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verify: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
