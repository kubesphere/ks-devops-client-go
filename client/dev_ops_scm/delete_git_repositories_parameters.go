// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteGitRepositoriesParams creates a new DeleteGitRepositoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteGitRepositoriesParams() *DeleteGitRepositoriesParams {
	return &DeleteGitRepositoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteGitRepositoriesParamsWithTimeout creates a new DeleteGitRepositoriesParams object
// with the ability to set a timeout on a request.
func NewDeleteGitRepositoriesParamsWithTimeout(timeout time.Duration) *DeleteGitRepositoriesParams {
	return &DeleteGitRepositoriesParams{
		timeout: timeout,
	}
}

// NewDeleteGitRepositoriesParamsWithContext creates a new DeleteGitRepositoriesParams object
// with the ability to set a context for a request.
func NewDeleteGitRepositoriesParamsWithContext(ctx context.Context) *DeleteGitRepositoriesParams {
	return &DeleteGitRepositoriesParams{
		Context: ctx,
	}
}

// NewDeleteGitRepositoriesParamsWithHTTPClient creates a new DeleteGitRepositoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteGitRepositoriesParamsWithHTTPClient(client *http.Client) *DeleteGitRepositoriesParams {
	return &DeleteGitRepositoriesParams{
		HTTPClient: client,
	}
}

/*
DeleteGitRepositoriesParams contains all the parameters to send to the API endpoint

	for the delete git repositories operation.

	Typically these are written to a http.Request.
*/
type DeleteGitRepositoriesParams struct {

	/* Gitrepository.

	   The GitRepository customs resource
	*/
	Gitrepository string

	/* Namespace.

	   The namespace name
	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGitRepositoriesParams) WithDefaults() *DeleteGitRepositoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteGitRepositoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete git repositories params
func (o *DeleteGitRepositoriesParams) WithTimeout(timeout time.Duration) *DeleteGitRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete git repositories params
func (o *DeleteGitRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete git repositories params
func (o *DeleteGitRepositoriesParams) WithContext(ctx context.Context) *DeleteGitRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete git repositories params
func (o *DeleteGitRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete git repositories params
func (o *DeleteGitRepositoriesParams) WithHTTPClient(client *http.Client) *DeleteGitRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete git repositories params
func (o *DeleteGitRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGitrepository adds the gitrepository to the delete git repositories params
func (o *DeleteGitRepositoriesParams) WithGitrepository(gitrepository string) *DeleteGitRepositoriesParams {
	o.SetGitrepository(gitrepository)
	return o
}

// SetGitrepository adds the gitrepository to the delete git repositories params
func (o *DeleteGitRepositoriesParams) SetGitrepository(gitrepository string) {
	o.Gitrepository = gitrepository
}

// WithNamespace adds the namespace to the delete git repositories params
func (o *DeleteGitRepositoriesParams) WithNamespace(namespace string) *DeleteGitRepositoriesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the delete git repositories params
func (o *DeleteGitRepositoriesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteGitRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param gitrepository
	if err := r.SetPathParam("gitrepository", o.Gitrepository); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
