// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetOrgRepoParams creates a new GetOrgRepoParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrgRepoParams() *GetOrgRepoParams {
	return &GetOrgRepoParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgRepoParamsWithTimeout creates a new GetOrgRepoParams object
// with the ability to set a timeout on a request.
func NewGetOrgRepoParamsWithTimeout(timeout time.Duration) *GetOrgRepoParams {
	return &GetOrgRepoParams{
		timeout: timeout,
	}
}

// NewGetOrgRepoParamsWithContext creates a new GetOrgRepoParams object
// with the ability to set a context for a request.
func NewGetOrgRepoParamsWithContext(ctx context.Context) *GetOrgRepoParams {
	return &GetOrgRepoParams{
		Context: ctx,
	}
}

// NewGetOrgRepoParamsWithHTTPClient creates a new GetOrgRepoParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrgRepoParamsWithHTTPClient(client *http.Client) *GetOrgRepoParams {
	return &GetOrgRepoParams{
		HTTPClient: client,
	}
}

/*
GetOrgRepoParams contains all the parameters to send to the API endpoint

	for the get org repo operation.

	Typically these are written to a http.Request.
*/
type GetOrgRepoParams struct {

	/* CredentialID.

	   credential ID for SCM.

	   Format: credentialId=%s
	*/
	CredentialID string

	/* Organization.

	   organization ID, such as github username.
	*/
	Organization string

	/* PageNumber.

	   page number.

	   Format: pageNumber=%d
	*/
	PageNumber string

	/* PageSize.

	   the item count of one page.

	   Format: pageSize=%d
	*/
	PageSize string

	/* Scm.

	   The ID of the source configuration management (SCM).
	*/
	Scm string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get org repo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgRepoParams) WithDefaults() *GetOrgRepoParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get org repo params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgRepoParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get org repo params
func (o *GetOrgRepoParams) WithTimeout(timeout time.Duration) *GetOrgRepoParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get org repo params
func (o *GetOrgRepoParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get org repo params
func (o *GetOrgRepoParams) WithContext(ctx context.Context) *GetOrgRepoParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get org repo params
func (o *GetOrgRepoParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get org repo params
func (o *GetOrgRepoParams) WithHTTPClient(client *http.Client) *GetOrgRepoParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get org repo params
func (o *GetOrgRepoParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialID adds the credentialID to the get org repo params
func (o *GetOrgRepoParams) WithCredentialID(credentialID string) *GetOrgRepoParams {
	o.SetCredentialID(credentialID)
	return o
}

// SetCredentialID adds the credentialId to the get org repo params
func (o *GetOrgRepoParams) SetCredentialID(credentialID string) {
	o.CredentialID = credentialID
}

// WithOrganization adds the organization to the get org repo params
func (o *GetOrgRepoParams) WithOrganization(organization string) *GetOrgRepoParams {
	o.SetOrganization(organization)
	return o
}

// SetOrganization adds the organization to the get org repo params
func (o *GetOrgRepoParams) SetOrganization(organization string) {
	o.Organization = organization
}

// WithPageNumber adds the pageNumber to the get org repo params
func (o *GetOrgRepoParams) WithPageNumber(pageNumber string) *GetOrgRepoParams {
	o.SetPageNumber(pageNumber)
	return o
}

// SetPageNumber adds the pageNumber to the get org repo params
func (o *GetOrgRepoParams) SetPageNumber(pageNumber string) {
	o.PageNumber = pageNumber
}

// WithPageSize adds the pageSize to the get org repo params
func (o *GetOrgRepoParams) WithPageSize(pageSize string) *GetOrgRepoParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get org repo params
func (o *GetOrgRepoParams) SetPageSize(pageSize string) {
	o.PageSize = pageSize
}

// WithScm adds the scm to the get org repo params
func (o *GetOrgRepoParams) WithScm(scm string) *GetOrgRepoParams {
	o.SetScm(scm)
	return o
}

// SetScm adds the scm to the get org repo params
func (o *GetOrgRepoParams) SetScm(scm string) {
	o.Scm = scm
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgRepoParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param credentialId
	qrCredentialID := o.CredentialID
	qCredentialID := qrCredentialID
	if qCredentialID != "" {

		if err := r.SetQueryParam("credentialId", qCredentialID); err != nil {
			return err
		}
	}

	// path param organization
	if err := r.SetPathParam("organization", o.Organization); err != nil {
		return err
	}

	// query param pageNumber
	qrPageNumber := o.PageNumber
	qPageNumber := qrPageNumber
	if qPageNumber != "" {

		if err := r.SetQueryParam("pageNumber", qPageNumber); err != nil {
			return err
		}
	}

	// query param pageSize
	qrPageSize := o.PageSize
	qPageSize := qrPageSize
	if qPageSize != "" {

		if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
			return err
		}
	}

	// path param scm
	if err := r.SetPathParam("scm", o.Scm); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
