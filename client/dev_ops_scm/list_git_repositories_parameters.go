// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_scm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListGitRepositoriesParams creates a new ListGitRepositoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListGitRepositoriesParams() *ListGitRepositoriesParams {
	return &ListGitRepositoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListGitRepositoriesParamsWithTimeout creates a new ListGitRepositoriesParams object
// with the ability to set a timeout on a request.
func NewListGitRepositoriesParamsWithTimeout(timeout time.Duration) *ListGitRepositoriesParams {
	return &ListGitRepositoriesParams{
		timeout: timeout,
	}
}

// NewListGitRepositoriesParamsWithContext creates a new ListGitRepositoriesParams object
// with the ability to set a context for a request.
func NewListGitRepositoriesParamsWithContext(ctx context.Context) *ListGitRepositoriesParams {
	return &ListGitRepositoriesParams{
		Context: ctx,
	}
}

// NewListGitRepositoriesParamsWithHTTPClient creates a new ListGitRepositoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListGitRepositoriesParamsWithHTTPClient(client *http.Client) *ListGitRepositoriesParams {
	return &ListGitRepositoriesParams{
		HTTPClient: client,
	}
}

/*
ListGitRepositoriesParams contains all the parameters to send to the API endpoint

	for the list git repositories operation.

	Typically these are written to a http.Request.
*/
type ListGitRepositoriesParams struct {

	/* Limit.

	   Which size per page you want to query. Default value is 10
	*/
	Limit *string

	/* Namespace.

	   The namespace name
	*/
	Namespace string

	/* Page.

	   Which page you want to query. Default value is 1
	*/
	Page *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGitRepositoriesParams) WithDefaults() *ListGitRepositoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list git repositories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGitRepositoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list git repositories params
func (o *ListGitRepositoriesParams) WithTimeout(timeout time.Duration) *ListGitRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list git repositories params
func (o *ListGitRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list git repositories params
func (o *ListGitRepositoriesParams) WithContext(ctx context.Context) *ListGitRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list git repositories params
func (o *ListGitRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list git repositories params
func (o *ListGitRepositoriesParams) WithHTTPClient(client *http.Client) *ListGitRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list git repositories params
func (o *ListGitRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the list git repositories params
func (o *ListGitRepositoriesParams) WithLimit(limit *string) *ListGitRepositoriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list git repositories params
func (o *ListGitRepositoriesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the list git repositories params
func (o *ListGitRepositoriesParams) WithNamespace(namespace string) *ListGitRepositoriesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list git repositories params
func (o *ListGitRepositoriesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPage adds the page to the list git repositories params
func (o *ListGitRepositoriesParams) WithPage(page *string) *ListGitRepositoriesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list git repositories params
func (o *ListGitRepositoriesParams) SetPage(page *string) {
	o.Page = page
}

// WriteToRequest writes these params to a swagger request
func (o *ListGitRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
