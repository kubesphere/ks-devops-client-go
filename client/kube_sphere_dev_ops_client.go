// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kubesphere/ks-devops-client-go/client/authentication"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_cluster_template"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_credential"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_jenkins"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_pipeline"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_project"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_scm"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_step_template"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_template"
	"github.com/kubesphere/ks-devops-client-go/client/dev_ops_webhook"
	"github.com/kubesphere/ks-devops-client-go/client/git_ops"
	"github.com/kubesphere/ks-devops-client-go/client/operations"
)

// Default kube sphere dev ops HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new kube sphere dev ops HTTP client.
func NewHTTPClient(formats strfmt.Registry) *KubeSphereDevOps {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new kube sphere dev ops HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *KubeSphereDevOps {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new kube sphere dev ops client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *KubeSphereDevOps {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(KubeSphereDevOps)
	cli.Transport = transport
	cli.Authentication = authentication.New(transport, formats)
	cli.DevOpsClusterTemplate = dev_ops_cluster_template.New(transport, formats)
	cli.DevOpsCredential = dev_ops_credential.New(transport, formats)
	cli.DevOpsJenkins = dev_ops_jenkins.New(transport, formats)
	cli.DevOpsPipeline = dev_ops_pipeline.New(transport, formats)
	cli.DevOpsProject = dev_ops_project.New(transport, formats)
	cli.DevOpsScm = dev_ops_scm.New(transport, formats)
	cli.DevOpsStepTemplate = dev_ops_step_template.New(transport, formats)
	cli.DevOpsTemplate = dev_ops_template.New(transport, formats)
	cli.DevOpsWebhook = dev_ops_webhook.New(transport, formats)
	cli.GitOps = git_ops.New(transport, formats)
	cli.Operations = operations.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// KubeSphereDevOps is a client for kube sphere dev ops
type KubeSphereDevOps struct {
	Authentication authentication.ClientService

	DevOpsClusterTemplate dev_ops_cluster_template.ClientService

	DevOpsCredential dev_ops_credential.ClientService

	DevOpsJenkins dev_ops_jenkins.ClientService

	DevOpsPipeline dev_ops_pipeline.ClientService

	DevOpsProject dev_ops_project.ClientService

	DevOpsScm dev_ops_scm.ClientService

	DevOpsStepTemplate dev_ops_step_template.ClientService

	DevOpsTemplate dev_ops_template.ClientService

	DevOpsWebhook dev_ops_webhook.ClientService

	GitOps git_ops.ClientService

	Operations operations.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *KubeSphereDevOps) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Authentication.SetTransport(transport)
	c.DevOpsClusterTemplate.SetTransport(transport)
	c.DevOpsCredential.SetTransport(transport)
	c.DevOpsJenkins.SetTransport(transport)
	c.DevOpsPipeline.SetTransport(transport)
	c.DevOpsProject.SetTransport(transport)
	c.DevOpsScm.SetTransport(transport)
	c.DevOpsStepTemplate.SetTransport(transport)
	c.DevOpsTemplate.SetTransport(transport)
	c.DevOpsWebhook.SetTransport(transport)
	c.GitOps.SetTransport(transport)
	c.Operations.SetTransport(transport)
}
