// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_cluster_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/kubesphere/ks-devops-client-go/models"
)

// NewHandleRenderClusterTemplateParams creates a new HandleRenderClusterTemplateParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHandleRenderClusterTemplateParams() *HandleRenderClusterTemplateParams {
	return &HandleRenderClusterTemplateParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHandleRenderClusterTemplateParamsWithTimeout creates a new HandleRenderClusterTemplateParams object
// with the ability to set a timeout on a request.
func NewHandleRenderClusterTemplateParamsWithTimeout(timeout time.Duration) *HandleRenderClusterTemplateParams {
	return &HandleRenderClusterTemplateParams{
		timeout: timeout,
	}
}

// NewHandleRenderClusterTemplateParamsWithContext creates a new HandleRenderClusterTemplateParams object
// with the ability to set a context for a request.
func NewHandleRenderClusterTemplateParamsWithContext(ctx context.Context) *HandleRenderClusterTemplateParams {
	return &HandleRenderClusterTemplateParams{
		Context: ctx,
	}
}

// NewHandleRenderClusterTemplateParamsWithHTTPClient creates a new HandleRenderClusterTemplateParams object
// with the ability to set a custom HTTPClient for a request.
func NewHandleRenderClusterTemplateParamsWithHTTPClient(client *http.Client) *HandleRenderClusterTemplateParams {
	return &HandleRenderClusterTemplateParams{
		HTTPClient: client,
	}
}

/*
HandleRenderClusterTemplateParams contains all the parameters to send to the API endpoint

	for the handle render cluster template operation.

	Typically these are written to a http.Request.
*/
type HandleRenderClusterTemplateParams struct {

	// Body.
	Body *models.TemplateRenderBody

	/* Clustertemplate.

	   Name of ClusterTemplate.
	*/
	Clustertemplate string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the handle render cluster template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HandleRenderClusterTemplateParams) WithDefaults() *HandleRenderClusterTemplateParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the handle render cluster template params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HandleRenderClusterTemplateParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) WithTimeout(timeout time.Duration) *HandleRenderClusterTemplateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) WithContext(ctx context.Context) *HandleRenderClusterTemplateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) WithHTTPClient(client *http.Client) *HandleRenderClusterTemplateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) WithBody(body *models.TemplateRenderBody) *HandleRenderClusterTemplateParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) SetBody(body *models.TemplateRenderBody) {
	o.Body = body
}

// WithClustertemplate adds the clustertemplate to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) WithClustertemplate(clustertemplate string) *HandleRenderClusterTemplateParams {
	o.SetClustertemplate(clustertemplate)
	return o
}

// SetClustertemplate adds the clustertemplate to the handle render cluster template params
func (o *HandleRenderClusterTemplateParams) SetClustertemplate(clustertemplate string) {
	o.Clustertemplate = clustertemplate
}

// WriteToRequest writes these params to a swagger request
func (o *HandleRenderClusterTemplateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param clustertemplate
	if err := r.SetPathParam("clustertemplate", o.Clustertemplate); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
