// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUploadS2iBinaryHandlerParams creates a new UploadS2iBinaryHandlerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadS2iBinaryHandlerParams() *UploadS2iBinaryHandlerParams {
	return &UploadS2iBinaryHandlerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadS2iBinaryHandlerParamsWithTimeout creates a new UploadS2iBinaryHandlerParams object
// with the ability to set a timeout on a request.
func NewUploadS2iBinaryHandlerParamsWithTimeout(timeout time.Duration) *UploadS2iBinaryHandlerParams {
	return &UploadS2iBinaryHandlerParams{
		timeout: timeout,
	}
}

// NewUploadS2iBinaryHandlerParamsWithContext creates a new UploadS2iBinaryHandlerParams object
// with the ability to set a context for a request.
func NewUploadS2iBinaryHandlerParamsWithContext(ctx context.Context) *UploadS2iBinaryHandlerParams {
	return &UploadS2iBinaryHandlerParams{
		Context: ctx,
	}
}

// NewUploadS2iBinaryHandlerParamsWithHTTPClient creates a new UploadS2iBinaryHandlerParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadS2iBinaryHandlerParamsWithHTTPClient(client *http.Client) *UploadS2iBinaryHandlerParams {
	return &UploadS2iBinaryHandlerParams{
		HTTPClient: client,
	}
}

/*
UploadS2iBinaryHandlerParams contains all the parameters to send to the API endpoint

	for the upload s2i binary handler operation.

	Typically these are written to a http.Request.
*/
type UploadS2iBinaryHandlerParams struct {

	/* Md5.

	   md5 of file
	*/
	Md5 *string

	/* Namespace.

	   the name of namespaces
	*/
	Namespace string

	/* S2ibinary.

	   the name of s2ibinary
	*/
	PathS2ibinary string

	/* S2ibinary.

	   file to upload
	*/
	FormDataS2ibinary *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload s2i binary handler params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadS2iBinaryHandlerParams) WithDefaults() *UploadS2iBinaryHandlerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload s2i binary handler params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadS2iBinaryHandlerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithTimeout(timeout time.Duration) *UploadS2iBinaryHandlerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithContext(ctx context.Context) *UploadS2iBinaryHandlerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithHTTPClient(client *http.Client) *UploadS2iBinaryHandlerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMd5 adds the md5 to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithMd5(md5 *string) *UploadS2iBinaryHandlerParams {
	o.SetMd5(md5)
	return o
}

// SetMd5 adds the md5 to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetMd5(md5 *string) {
	o.Md5 = md5
}

// WithNamespace adds the namespace to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithNamespace(namespace string) *UploadS2iBinaryHandlerParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPathS2ibinary adds the s2ibinary to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithPathS2ibinary(s2ibinary string) *UploadS2iBinaryHandlerParams {
	o.SetPathS2ibinary(s2ibinary)
	return o
}

// SetPathS2ibinary adds the s2ibinary to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetPathS2ibinary(s2ibinary string) {
	o.PathS2ibinary = s2ibinary
}

// WithFormDataS2ibinary adds the s2ibinary to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) WithFormDataS2ibinary(s2ibinary *string) *UploadS2iBinaryHandlerParams {
	o.SetFormDataS2ibinary(s2ibinary)
	return o
}

// SetFormDataS2ibinary adds the s2ibinary to the upload s2i binary handler params
func (o *UploadS2iBinaryHandlerParams) SetFormDataS2ibinary(s2ibinary *string) {
	o.FormDataS2ibinary = s2ibinary
}

// WriteToRequest writes these params to a swagger request
func (o *UploadS2iBinaryHandlerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Md5 != nil {

		// form param md5
		var frMd5 string
		if o.Md5 != nil {
			frMd5 = *o.Md5
		}
		fMd5 := frMd5
		if fMd5 != "" {
			if err := r.SetFormParam("md5", fMd5); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param s2ibinary
	if err := r.SetPathParam("s2ibinary", o.PathS2ibinary); err != nil {
		return err
	}

	if o.FormDataS2ibinary != nil {

		// form param s2ibinary
		var frS2ibinary string
		if o.FormDataS2ibinary != nil {
			frS2ibinary = *o.FormDataS2ibinary
		}
		fS2ibinary := frS2ibinary
		if fS2ibinary != "" {
			if err := r.SetFormParam("s2ibinary", fS2ibinary); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
