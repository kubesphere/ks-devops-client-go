// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDownloadS2iBinaryHandlerParams creates a new DownloadS2iBinaryHandlerParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDownloadS2iBinaryHandlerParams() *DownloadS2iBinaryHandlerParams {
	return &DownloadS2iBinaryHandlerParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDownloadS2iBinaryHandlerParamsWithTimeout creates a new DownloadS2iBinaryHandlerParams object
// with the ability to set a timeout on a request.
func NewDownloadS2iBinaryHandlerParamsWithTimeout(timeout time.Duration) *DownloadS2iBinaryHandlerParams {
	return &DownloadS2iBinaryHandlerParams{
		timeout: timeout,
	}
}

// NewDownloadS2iBinaryHandlerParamsWithContext creates a new DownloadS2iBinaryHandlerParams object
// with the ability to set a context for a request.
func NewDownloadS2iBinaryHandlerParamsWithContext(ctx context.Context) *DownloadS2iBinaryHandlerParams {
	return &DownloadS2iBinaryHandlerParams{
		Context: ctx,
	}
}

// NewDownloadS2iBinaryHandlerParamsWithHTTPClient creates a new DownloadS2iBinaryHandlerParams object
// with the ability to set a custom HTTPClient for a request.
func NewDownloadS2iBinaryHandlerParamsWithHTTPClient(client *http.Client) *DownloadS2iBinaryHandlerParams {
	return &DownloadS2iBinaryHandlerParams{
		HTTPClient: client,
	}
}

/*
DownloadS2iBinaryHandlerParams contains all the parameters to send to the API endpoint

	for the download s2i binary handler operation.

	Typically these are written to a http.Request.
*/
type DownloadS2iBinaryHandlerParams struct {

	/* File.

	   the name of binary file
	*/
	File string

	/* Namespace.

	   the name of namespaces
	*/
	Namespace string

	/* S2ibinary.

	   the name of s2ibinary
	*/
	S2ibinary string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the download s2i binary handler params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadS2iBinaryHandlerParams) WithDefaults() *DownloadS2iBinaryHandlerParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the download s2i binary handler params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DownloadS2iBinaryHandlerParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithTimeout(timeout time.Duration) *DownloadS2iBinaryHandlerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithContext(ctx context.Context) *DownloadS2iBinaryHandlerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithHTTPClient(client *http.Client) *DownloadS2iBinaryHandlerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFile adds the file to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithFile(file string) *DownloadS2iBinaryHandlerParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetFile(file string) {
	o.File = file
}

// WithNamespace adds the namespace to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithNamespace(namespace string) *DownloadS2iBinaryHandlerParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithS2ibinary adds the s2ibinary to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) WithS2ibinary(s2ibinary string) *DownloadS2iBinaryHandlerParams {
	o.SetS2ibinary(s2ibinary)
	return o
}

// SetS2ibinary adds the s2ibinary to the download s2i binary handler params
func (o *DownloadS2iBinaryHandlerParams) SetS2ibinary(s2ibinary string) {
	o.S2ibinary = s2ibinary
}

// WriteToRequest writes these params to a swagger request
func (o *DownloadS2iBinaryHandlerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param file
	if err := r.SetPathParam("file", o.File); err != nil {
		return err
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	// path param s2ibinary
	if err := r.SetPathParam("s2ibinary", o.S2ibinary); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
