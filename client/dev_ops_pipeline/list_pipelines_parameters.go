// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListPipelinesParams creates a new ListPipelinesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListPipelinesParams() *ListPipelinesParams {
	return &ListPipelinesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListPipelinesParamsWithTimeout creates a new ListPipelinesParams object
// with the ability to set a timeout on a request.
func NewListPipelinesParamsWithTimeout(timeout time.Duration) *ListPipelinesParams {
	return &ListPipelinesParams{
		timeout: timeout,
	}
}

// NewListPipelinesParamsWithContext creates a new ListPipelinesParams object
// with the ability to set a context for a request.
func NewListPipelinesParamsWithContext(ctx context.Context) *ListPipelinesParams {
	return &ListPipelinesParams{
		Context: ctx,
	}
}

// NewListPipelinesParamsWithHTTPClient creates a new ListPipelinesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListPipelinesParamsWithHTTPClient(client *http.Client) *ListPipelinesParams {
	return &ListPipelinesParams{
		HTTPClient: client,
	}
}

/*
ListPipelinesParams contains all the parameters to send to the API endpoint

	for the list pipelines operation.

	Typically these are written to a http.Request.
*/
type ListPipelinesParams struct {

	/* Filter.

	   Filter some types of jobs. e.g. no-folderï¼Œwill not get a job of type folder

	   Format: filter=%s
	*/
	Filter *string

	/* Limit.

	   the limit item count of the search.

	   Format: limit=%d
	*/
	Limit *string

	/* Q.

	   query pipelines, condition for filtering.

	   Format: q=%s
	*/
	Q string

	/* Start.

	   the item number that the search starts from.

	   Format: start=%d
	*/
	Start *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list pipelines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPipelinesParams) WithDefaults() *ListPipelinesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list pipelines params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPipelinesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list pipelines params
func (o *ListPipelinesParams) WithTimeout(timeout time.Duration) *ListPipelinesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list pipelines params
func (o *ListPipelinesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list pipelines params
func (o *ListPipelinesParams) WithContext(ctx context.Context) *ListPipelinesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list pipelines params
func (o *ListPipelinesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list pipelines params
func (o *ListPipelinesParams) WithHTTPClient(client *http.Client) *ListPipelinesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list pipelines params
func (o *ListPipelinesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilter adds the filter to the list pipelines params
func (o *ListPipelinesParams) WithFilter(filter *string) *ListPipelinesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list pipelines params
func (o *ListPipelinesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the list pipelines params
func (o *ListPipelinesParams) WithLimit(limit *string) *ListPipelinesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list pipelines params
func (o *ListPipelinesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithQ adds the q to the list pipelines params
func (o *ListPipelinesParams) WithQ(q string) *ListPipelinesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the list pipelines params
func (o *ListPipelinesParams) SetQ(q string) {
	o.Q = q
}

// WithStart adds the start to the list pipelines params
func (o *ListPipelinesParams) WithStart(start *string) *ListPipelinesParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the list pipelines params
func (o *ListPipelinesParams) SetStart(start *string) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *ListPipelinesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {

		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
