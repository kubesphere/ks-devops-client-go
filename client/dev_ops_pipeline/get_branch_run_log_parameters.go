// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBranchRunLogParams creates a new GetBranchRunLogParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBranchRunLogParams() *GetBranchRunLogParams {
	return &GetBranchRunLogParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBranchRunLogParamsWithTimeout creates a new GetBranchRunLogParams object
// with the ability to set a timeout on a request.
func NewGetBranchRunLogParamsWithTimeout(timeout time.Duration) *GetBranchRunLogParams {
	return &GetBranchRunLogParams{
		timeout: timeout,
	}
}

// NewGetBranchRunLogParamsWithContext creates a new GetBranchRunLogParams object
// with the ability to set a context for a request.
func NewGetBranchRunLogParamsWithContext(ctx context.Context) *GetBranchRunLogParams {
	return &GetBranchRunLogParams{
		Context: ctx,
	}
}

// NewGetBranchRunLogParamsWithHTTPClient creates a new GetBranchRunLogParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBranchRunLogParamsWithHTTPClient(client *http.Client) *GetBranchRunLogParams {
	return &GetBranchRunLogParams{
		HTTPClient: client,
	}
}

/*
GetBranchRunLogParams contains all the parameters to send to the API endpoint

	for the get branch run log operation.

	Typically these are written to a http.Request.
*/
type GetBranchRunLogParams struct {

	/* Branch.

	   the name of branch, same as repository branch.
	*/
	Branch string

	/* Devops.

	   DevOps project's ID, e.g. project-RRRRAzLBlLEm
	*/
	Devops string

	/* Pipeline.

	   the name of the CI/CD pipeline
	*/
	Pipeline string

	/* Run.

	   pipeline run ID, the unique ID for a pipeline once build.
	*/
	Run string

	/* Start.

	   the item number that the search starts from.

	   Format: start=%d
	   Default: "start=0"
	*/
	Start *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get branch run log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBranchRunLogParams) WithDefaults() *GetBranchRunLogParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get branch run log params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBranchRunLogParams) SetDefaults() {
	var (
		startDefault = string("start=0")
	)

	val := GetBranchRunLogParams{
		Start: &startDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get branch run log params
func (o *GetBranchRunLogParams) WithTimeout(timeout time.Duration) *GetBranchRunLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get branch run log params
func (o *GetBranchRunLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get branch run log params
func (o *GetBranchRunLogParams) WithContext(ctx context.Context) *GetBranchRunLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get branch run log params
func (o *GetBranchRunLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get branch run log params
func (o *GetBranchRunLogParams) WithHTTPClient(client *http.Client) *GetBranchRunLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get branch run log params
func (o *GetBranchRunLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranch adds the branch to the get branch run log params
func (o *GetBranchRunLogParams) WithBranch(branch string) *GetBranchRunLogParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the get branch run log params
func (o *GetBranchRunLogParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithDevops adds the devops to the get branch run log params
func (o *GetBranchRunLogParams) WithDevops(devops string) *GetBranchRunLogParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the get branch run log params
func (o *GetBranchRunLogParams) SetDevops(devops string) {
	o.Devops = devops
}

// WithPipeline adds the pipeline to the get branch run log params
func (o *GetBranchRunLogParams) WithPipeline(pipeline string) *GetBranchRunLogParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the get branch run log params
func (o *GetBranchRunLogParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WithRun adds the run to the get branch run log params
func (o *GetBranchRunLogParams) WithRun(run string) *GetBranchRunLogParams {
	o.SetRun(run)
	return o
}

// SetRun adds the run to the get branch run log params
func (o *GetBranchRunLogParams) SetRun(run string) {
	o.Run = run
}

// WithStart adds the start to the get branch run log params
func (o *GetBranchRunLogParams) WithStart(start *string) *GetBranchRunLogParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get branch run log params
func (o *GetBranchRunLogParams) SetStart(start *string) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetBranchRunLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	// path param run
	if err := r.SetPathParam("run", o.Run); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
