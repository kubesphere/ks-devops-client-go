// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStopPipelineParams creates a new StopPipelineParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStopPipelineParams() *StopPipelineParams {
	return &StopPipelineParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStopPipelineParamsWithTimeout creates a new StopPipelineParams object
// with the ability to set a timeout on a request.
func NewStopPipelineParamsWithTimeout(timeout time.Duration) *StopPipelineParams {
	return &StopPipelineParams{
		timeout: timeout,
	}
}

// NewStopPipelineParamsWithContext creates a new StopPipelineParams object
// with the ability to set a context for a request.
func NewStopPipelineParamsWithContext(ctx context.Context) *StopPipelineParams {
	return &StopPipelineParams{
		Context: ctx,
	}
}

// NewStopPipelineParamsWithHTTPClient creates a new StopPipelineParams object
// with the ability to set a custom HTTPClient for a request.
func NewStopPipelineParamsWithHTTPClient(client *http.Client) *StopPipelineParams {
	return &StopPipelineParams{
		HTTPClient: client,
	}
}

/*
StopPipelineParams contains all the parameters to send to the API endpoint

	for the stop pipeline operation.

	Typically these are written to a http.Request.
*/
type StopPipelineParams struct {

	/* Blocking.

	   stop and between each retries will sleep.

	   Format: blocking=%t
	   Default: "blocking=false"
	*/
	Blocking *string

	// Body.
	Body []int64

	/* Devops.

	   DevOps project's ID, e.g. project-RRRRAzLBlLEm
	*/
	Devops string

	/* Pipeline.

	   the name of the CI/CD pipeline
	*/
	Pipeline string

	/* Run.

	   pipeline run ID, the unique ID for a pipeline once build.
	*/
	Run string

	/* TimeOutInSecs.

	   the time of stop and between each retries sleep.

	   Format: timeOutInSecs=%d
	   Default: "timeOutInSecs=10"
	*/
	TimeOutInSecs *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the stop pipeline params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StopPipelineParams) WithDefaults() *StopPipelineParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the stop pipeline params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StopPipelineParams) SetDefaults() {
	var (
		blockingDefault = string("blocking=false")

		timeOutInSecsDefault = string("timeOutInSecs=10")
	)

	val := StopPipelineParams{
		Blocking:      &blockingDefault,
		TimeOutInSecs: &timeOutInSecsDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the stop pipeline params
func (o *StopPipelineParams) WithTimeout(timeout time.Duration) *StopPipelineParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stop pipeline params
func (o *StopPipelineParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stop pipeline params
func (o *StopPipelineParams) WithContext(ctx context.Context) *StopPipelineParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stop pipeline params
func (o *StopPipelineParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stop pipeline params
func (o *StopPipelineParams) WithHTTPClient(client *http.Client) *StopPipelineParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stop pipeline params
func (o *StopPipelineParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBlocking adds the blocking to the stop pipeline params
func (o *StopPipelineParams) WithBlocking(blocking *string) *StopPipelineParams {
	o.SetBlocking(blocking)
	return o
}

// SetBlocking adds the blocking to the stop pipeline params
func (o *StopPipelineParams) SetBlocking(blocking *string) {
	o.Blocking = blocking
}

// WithBody adds the body to the stop pipeline params
func (o *StopPipelineParams) WithBody(body []int64) *StopPipelineParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the stop pipeline params
func (o *StopPipelineParams) SetBody(body []int64) {
	o.Body = body
}

// WithDevops adds the devops to the stop pipeline params
func (o *StopPipelineParams) WithDevops(devops string) *StopPipelineParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the stop pipeline params
func (o *StopPipelineParams) SetDevops(devops string) {
	o.Devops = devops
}

// WithPipeline adds the pipeline to the stop pipeline params
func (o *StopPipelineParams) WithPipeline(pipeline string) *StopPipelineParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the stop pipeline params
func (o *StopPipelineParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WithRun adds the run to the stop pipeline params
func (o *StopPipelineParams) WithRun(run string) *StopPipelineParams {
	o.SetRun(run)
	return o
}

// SetRun adds the run to the stop pipeline params
func (o *StopPipelineParams) SetRun(run string) {
	o.Run = run
}

// WithTimeOutInSecs adds the timeOutInSecs to the stop pipeline params
func (o *StopPipelineParams) WithTimeOutInSecs(timeOutInSecs *string) *StopPipelineParams {
	o.SetTimeOutInSecs(timeOutInSecs)
	return o
}

// SetTimeOutInSecs adds the timeOutInSecs to the stop pipeline params
func (o *StopPipelineParams) SetTimeOutInSecs(timeOutInSecs *string) {
	o.TimeOutInSecs = timeOutInSecs
}

// WriteToRequest writes these params to a swagger request
func (o *StopPipelineParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Blocking != nil {

		// query param blocking
		var qrBlocking string

		if o.Blocking != nil {
			qrBlocking = *o.Blocking
		}
		qBlocking := qrBlocking
		if qBlocking != "" {

			if err := r.SetQueryParam("blocking", qBlocking); err != nil {
				return err
			}
		}
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	// path param run
	if err := r.SetPathParam("run", o.Run); err != nil {
		return err
	}

	if o.TimeOutInSecs != nil {

		// query param timeOutInSecs
		var qrTimeOutInSecs string

		if o.TimeOutInSecs != nil {
			qrTimeOutInSecs = *o.TimeOutInSecs
		}
		qTimeOutInSecs := qrTimeOutInSecs
		if qTimeOutInSecs != "" {

			if err := r.SetQueryParam("timeOutInSecs", qTimeOutInSecs); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
