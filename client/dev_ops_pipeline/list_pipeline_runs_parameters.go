// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListPipelineRunsParams creates a new ListPipelineRunsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListPipelineRunsParams() *ListPipelineRunsParams {
	return &ListPipelineRunsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListPipelineRunsParamsWithTimeout creates a new ListPipelineRunsParams object
// with the ability to set a timeout on a request.
func NewListPipelineRunsParamsWithTimeout(timeout time.Duration) *ListPipelineRunsParams {
	return &ListPipelineRunsParams{
		timeout: timeout,
	}
}

// NewListPipelineRunsParamsWithContext creates a new ListPipelineRunsParams object
// with the ability to set a context for a request.
func NewListPipelineRunsParamsWithContext(ctx context.Context) *ListPipelineRunsParams {
	return &ListPipelineRunsParams{
		Context: ctx,
	}
}

// NewListPipelineRunsParamsWithHTTPClient creates a new ListPipelineRunsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListPipelineRunsParamsWithHTTPClient(client *http.Client) *ListPipelineRunsParams {
	return &ListPipelineRunsParams{
		HTTPClient: client,
	}
}

/*
ListPipelineRunsParams contains all the parameters to send to the API endpoint

	for the list pipeline runs operation.

	Typically these are written to a http.Request.
*/
type ListPipelineRunsParams struct {

	/* Backward.

	   Backward compatibility for v1alpha2 API `/devops/{devops}/pipelines/{pipeline}/runs`. By default, the backward is true. If you want to list full data of PipelineRuns, just set the parameters to false.

	   Default: true
	*/
	Backward *bool

	/* Branch.

	   The name of SCM reference
	*/
	Branch *string

	/* Limit.

	   limit
	*/
	Limit *string

	/* Namespace.

	   Namespace of the pipeline
	*/
	Namespace string

	/* Page.

	   page

	   Format: page=%d
	   Default: "page=1"
	*/
	Page *string

	/* Pipeline.

	   Name of the pipeline
	*/
	Pipeline string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list pipeline runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPipelineRunsParams) WithDefaults() *ListPipelineRunsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list pipeline runs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListPipelineRunsParams) SetDefaults() {
	var (
		backwardDefault = bool(true)

		pageDefault = string("page=1")
	)

	val := ListPipelineRunsParams{
		Backward: &backwardDefault,
		Page:     &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list pipeline runs params
func (o *ListPipelineRunsParams) WithTimeout(timeout time.Duration) *ListPipelineRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list pipeline runs params
func (o *ListPipelineRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list pipeline runs params
func (o *ListPipelineRunsParams) WithContext(ctx context.Context) *ListPipelineRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list pipeline runs params
func (o *ListPipelineRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list pipeline runs params
func (o *ListPipelineRunsParams) WithHTTPClient(client *http.Client) *ListPipelineRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list pipeline runs params
func (o *ListPipelineRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackward adds the backward to the list pipeline runs params
func (o *ListPipelineRunsParams) WithBackward(backward *bool) *ListPipelineRunsParams {
	o.SetBackward(backward)
	return o
}

// SetBackward adds the backward to the list pipeline runs params
func (o *ListPipelineRunsParams) SetBackward(backward *bool) {
	o.Backward = backward
}

// WithBranch adds the branch to the list pipeline runs params
func (o *ListPipelineRunsParams) WithBranch(branch *string) *ListPipelineRunsParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the list pipeline runs params
func (o *ListPipelineRunsParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithLimit adds the limit to the list pipeline runs params
func (o *ListPipelineRunsParams) WithLimit(limit *string) *ListPipelineRunsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list pipeline runs params
func (o *ListPipelineRunsParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the list pipeline runs params
func (o *ListPipelineRunsParams) WithNamespace(namespace string) *ListPipelineRunsParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the list pipeline runs params
func (o *ListPipelineRunsParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPage adds the page to the list pipeline runs params
func (o *ListPipelineRunsParams) WithPage(page *string) *ListPipelineRunsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list pipeline runs params
func (o *ListPipelineRunsParams) SetPage(page *string) {
	o.Page = page
}

// WithPipeline adds the pipeline to the list pipeline runs params
func (o *ListPipelineRunsParams) WithPipeline(pipeline string) *ListPipelineRunsParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the list pipeline runs params
func (o *ListPipelineRunsParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WriteToRequest writes these params to a swagger request
func (o *ListPipelineRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Backward != nil {

		// query param backward
		var qrBackward bool

		if o.Backward != nil {
			qrBackward = *o.Backward
		}
		qBackward := swag.FormatBool(qrBackward)
		if qBackward != "" {

			if err := r.SetQueryParam("backward", qBackward); err != nil {
				return err
			}
		}
	}

	if o.Branch != nil {

		// query param branch
		var qrBranch string

		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {

			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
