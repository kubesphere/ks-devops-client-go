// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReplayBranchPipelineParams creates a new ReplayBranchPipelineParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReplayBranchPipelineParams() *ReplayBranchPipelineParams {
	return &ReplayBranchPipelineParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReplayBranchPipelineParamsWithTimeout creates a new ReplayBranchPipelineParams object
// with the ability to set a timeout on a request.
func NewReplayBranchPipelineParamsWithTimeout(timeout time.Duration) *ReplayBranchPipelineParams {
	return &ReplayBranchPipelineParams{
		timeout: timeout,
	}
}

// NewReplayBranchPipelineParamsWithContext creates a new ReplayBranchPipelineParams object
// with the ability to set a context for a request.
func NewReplayBranchPipelineParamsWithContext(ctx context.Context) *ReplayBranchPipelineParams {
	return &ReplayBranchPipelineParams{
		Context: ctx,
	}
}

// NewReplayBranchPipelineParamsWithHTTPClient creates a new ReplayBranchPipelineParams object
// with the ability to set a custom HTTPClient for a request.
func NewReplayBranchPipelineParamsWithHTTPClient(client *http.Client) *ReplayBranchPipelineParams {
	return &ReplayBranchPipelineParams{
		HTTPClient: client,
	}
}

/*
ReplayBranchPipelineParams contains all the parameters to send to the API endpoint

	for the replay branch pipeline operation.

	Typically these are written to a http.Request.
*/
type ReplayBranchPipelineParams struct {

	// Body.
	Body []int64

	/* Branch.

	   the name of branch, same as repository branch.
	*/
	Branch string

	/* Devops.

	   DevOps project's ID, e.g. project-RRRRAzLBlLEm
	*/
	Devops string

	/* Pipeline.

	   the name of the CI/CD pipeline
	*/
	Pipeline string

	/* Run.

	   pipeline run ID, the unique ID for a pipeline once build.
	*/
	Run string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the replay branch pipeline params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplayBranchPipelineParams) WithDefaults() *ReplayBranchPipelineParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the replay branch pipeline params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplayBranchPipelineParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithTimeout(timeout time.Duration) *ReplayBranchPipelineParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithContext(ctx context.Context) *ReplayBranchPipelineParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithHTTPClient(client *http.Client) *ReplayBranchPipelineParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithBody(body []int64) *ReplayBranchPipelineParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetBody(body []int64) {
	o.Body = body
}

// WithBranch adds the branch to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithBranch(branch string) *ReplayBranchPipelineParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetBranch(branch string) {
	o.Branch = branch
}

// WithDevops adds the devops to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithDevops(devops string) *ReplayBranchPipelineParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetDevops(devops string) {
	o.Devops = devops
}

// WithPipeline adds the pipeline to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithPipeline(pipeline string) *ReplayBranchPipelineParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WithRun adds the run to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) WithRun(run string) *ReplayBranchPipelineParams {
	o.SetRun(run)
	return o
}

// SetRun adds the run to the replay branch pipeline params
func (o *ReplayBranchPipelineParams) SetRun(run string) {
	o.Run = run
}

// WriteToRequest writes these params to a swagger request
func (o *ReplayBranchPipelineParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param branch
	if err := r.SetPathParam("branch", o.Branch); err != nil {
		return err
	}

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	// path param run
	if err := r.SetPathParam("run", o.Run); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
