// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPipelineBranchParams creates a new GetPipelineBranchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPipelineBranchParams() *GetPipelineBranchParams {
	return &GetPipelineBranchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPipelineBranchParamsWithTimeout creates a new GetPipelineBranchParams object
// with the ability to set a timeout on a request.
func NewGetPipelineBranchParamsWithTimeout(timeout time.Duration) *GetPipelineBranchParams {
	return &GetPipelineBranchParams{
		timeout: timeout,
	}
}

// NewGetPipelineBranchParamsWithContext creates a new GetPipelineBranchParams object
// with the ability to set a context for a request.
func NewGetPipelineBranchParamsWithContext(ctx context.Context) *GetPipelineBranchParams {
	return &GetPipelineBranchParams{
		Context: ctx,
	}
}

// NewGetPipelineBranchParamsWithHTTPClient creates a new GetPipelineBranchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPipelineBranchParamsWithHTTPClient(client *http.Client) *GetPipelineBranchParams {
	return &GetPipelineBranchParams{
		HTTPClient: client,
	}
}

/*
GetPipelineBranchParams contains all the parameters to send to the API endpoint

	for the get pipeline branch operation.

	Typically these are written to a http.Request.
*/
type GetPipelineBranchParams struct {

	/* Devops.

	   DevOps project's ID, e.g. project-RRRRAzLBlLEm
	*/
	Devops string

	/* Filter.

	   filter remote scm. e.g. origin

	   Format: filter=%s
	*/
	Filter *string

	/* Limit.

	   the count of branches limit.

	   Format: limit=%d
	   Default: "limit=100"
	*/
	Limit *string

	/* Pipeline.

	   the name of the CI/CD pipeline
	*/
	Pipeline string

	/* Start.

	   the count of branches start.

	   Format: start=%d
	   Default: "start=0"
	*/
	Start *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pipeline branch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPipelineBranchParams) WithDefaults() *GetPipelineBranchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pipeline branch params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPipelineBranchParams) SetDefaults() {
	var (
		limitDefault = string("limit=100")

		startDefault = string("start=0")
	)

	val := GetPipelineBranchParams{
		Limit: &limitDefault,
		Start: &startDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get pipeline branch params
func (o *GetPipelineBranchParams) WithTimeout(timeout time.Duration) *GetPipelineBranchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pipeline branch params
func (o *GetPipelineBranchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pipeline branch params
func (o *GetPipelineBranchParams) WithContext(ctx context.Context) *GetPipelineBranchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pipeline branch params
func (o *GetPipelineBranchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pipeline branch params
func (o *GetPipelineBranchParams) WithHTTPClient(client *http.Client) *GetPipelineBranchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pipeline branch params
func (o *GetPipelineBranchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevops adds the devops to the get pipeline branch params
func (o *GetPipelineBranchParams) WithDevops(devops string) *GetPipelineBranchParams {
	o.SetDevops(devops)
	return o
}

// SetDevops adds the devops to the get pipeline branch params
func (o *GetPipelineBranchParams) SetDevops(devops string) {
	o.Devops = devops
}

// WithFilter adds the filter to the get pipeline branch params
func (o *GetPipelineBranchParams) WithFilter(filter *string) *GetPipelineBranchParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get pipeline branch params
func (o *GetPipelineBranchParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the get pipeline branch params
func (o *GetPipelineBranchParams) WithLimit(limit *string) *GetPipelineBranchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get pipeline branch params
func (o *GetPipelineBranchParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithPipeline adds the pipeline to the get pipeline branch params
func (o *GetPipelineBranchParams) WithPipeline(pipeline string) *GetPipelineBranchParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the get pipeline branch params
func (o *GetPipelineBranchParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WithStart adds the start to the get pipeline branch params
func (o *GetPipelineBranchParams) WithStart(start *string) *GetPipelineBranchParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get pipeline branch params
func (o *GetPipelineBranchParams) SetStart(start *string) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetPipelineBranchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param devops
	if err := r.SetPathParam("devops", o.Devops); err != nil {
		return err
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	if o.Start != nil {

		// query param start
		var qrStart string

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
