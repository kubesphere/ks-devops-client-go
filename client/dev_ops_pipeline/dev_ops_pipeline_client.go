// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new dev ops pipeline API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new dev ops pipeline API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new dev ops pipeline API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for dev ops pipeline API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithContentTypeCharsetUTF8 sets the Content-Type header to "charset=utf-8".
func WithContentTypeCharsetUTF8(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"charset=utf-8"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptCharsetUTF8 sets the Accept header to "charset=utf-8".
func WithAcceptCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"charset=utf-8"}
}

// WithAcceptTextHTMLCharsetUTF8 sets the Accept header to "text/html; charset=utf-8".
func WithAcceptTextHTMLCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/html; charset=utf-8"}
}

// WithAcceptTextPlainCharsetUTF8 sets the Accept header to "text/plain; charset=utf-8".
func WithAcceptTextPlainCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain; charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CheckCron(params *CheckCronParams, opts ...ClientOption) (*CheckCronOK, error)

	CheckScriptCompile(params *CheckScriptCompileParams, opts ...ClientOption) (*CheckScriptCompileOK, error)

	CreatePipeline(params *CreatePipelineParams, opts ...ClientOption) (*CreatePipelineOK, error)

	DeletePipeline(params *DeletePipelineParams, opts ...ClientOption) (*DeletePipelineOK, error)

	GetArtifacts(params *GetArtifactsParams, opts ...ClientOption) (*GetArtifactsOK, error)

	GetBranchArtifacts(params *GetBranchArtifactsParams, opts ...ClientOption) (*GetBranchArtifactsOK, error)

	GetBranchNodeSteps(params *GetBranchNodeStepsParams, opts ...ClientOption) (*GetBranchNodeStepsOK, error)

	GetBranchNodesDetail(params *GetBranchNodesDetailParams, opts ...ClientOption) (*GetBranchNodesDetailOK, error)

	GetBranchPipeline(params *GetBranchPipelineParams, opts ...ClientOption) (*GetBranchPipelineOK, error)

	GetBranchPipelineRun(params *GetBranchPipelineRunParams, opts ...ClientOption) (*GetBranchPipelineRunOK, error)

	GetBranchPipelineRunNodes(params *GetBranchPipelineRunNodesParams, opts ...ClientOption) (*GetBranchPipelineRunNodesOK, error)

	GetBranchRunLog(params *GetBranchRunLogParams, opts ...ClientOption) (*GetBranchRunLogOK, error)

	GetBranchStepLog(params *GetBranchStepLogParams, opts ...ClientOption) (*GetBranchStepLogOK, error)

	GetConsoleLog(params *GetConsoleLogParams, opts ...ClientOption) (*GetConsoleLogOK, error)

	GetCrumb(params *GetCrumbParams, opts ...ClientOption) (*GetCrumbOK, error)

	GetMultiBranchesPipelineSonarStatusHandler(params *GetMultiBranchesPipelineSonarStatusHandlerParams, opts ...ClientOption) (*GetMultiBranchesPipelineSonarStatusHandlerOK, error)

	GetNodeSteps(params *GetNodeStepsParams, opts ...ClientOption) (*GetNodeStepsOK, error)

	GetNodesDetail(params *GetNodesDetailParams, opts ...ClientOption) (*GetNodesDetailOK, error)

	GetPipeline(params *GetPipelineParams, opts ...ClientOption) (*GetPipelineOK, error)

	GetPipelineBranch(params *GetPipelineBranchParams, opts ...ClientOption) (*GetPipelineBranchOK, error)

	GetPipelineRunNodes(params *GetPipelineRunNodesParams, opts ...ClientOption) (*GetPipelineRunNodesOK, error)

	GetPipelineRunV1alpha2(params *GetPipelineRunV1alpha2Params, opts ...ClientOption) (*GetPipelineRunV1alpha2OK, error)

	GetPipelineSonarStatusHandler(params *GetPipelineSonarStatusHandlerParams, opts ...ClientOption) (*GetPipelineSonarStatusHandlerOK, error)

	GetRunLog(params *GetRunLogParams, opts ...ClientOption) (*GetRunLogOK, error)

	GetStepLog(params *GetStepLogParams, opts ...ClientOption) (*GetStepLogOK, error)

	ListPipeline(params *ListPipelineParams, opts ...ClientOption) (*ListPipelineOK, error)

	ListPipelineRunsV1alpha2(params *ListPipelineRunsV1alpha2Params, opts ...ClientOption) (*ListPipelineRunsV1alpha2OK, error)

	ListPipelines(params *ListPipelinesParams, opts ...ClientOption) (*ListPipelinesOK, error)

	ReplayBranchPipeline(params *ReplayBranchPipelineParams, opts ...ClientOption) (*ReplayBranchPipelineOK, error)

	ReplayPipeline(params *ReplayPipelineParams, opts ...ClientOption) (*ReplayPipelineOK, error)

	RunBranchPipeline(params *RunBranchPipelineParams, opts ...ClientOption) (*RunBranchPipelineOK, error)

	RunPipeline(params *RunPipelineParams, opts ...ClientOption) (*RunPipelineOK, error)

	ScanBranch(params *ScanBranchParams, opts ...ClientOption) (*ScanBranchOK, error)

	StopBranchPipeline(params *StopBranchPipelineParams, opts ...ClientOption) (*StopBranchPipelineOK, error)

	StopPipeline(params *StopPipelineParams, opts ...ClientOption) (*StopPipelineOK, error)

	SubmitBranchInputStep(params *SubmitBranchInputStepParams, opts ...ClientOption) (*SubmitBranchInputStepOK, error)

	SubmitInputStep(params *SubmitInputStepParams, opts ...ClientOption) (*SubmitInputStepOK, error)

	UpdatePipeline(params *UpdatePipelineParams, opts ...ClientOption) (*UpdatePipelineOK, error)

	CreatePipelineRun(params *CreatePipelineRunParams, opts ...ClientOption) (*CreatePipelineRunCreated, error)

	DownloadArtifact(params *DownloadArtifactParams, opts ...ClientOption) (*DownloadArtifactOK, error)

	GetBranch(params *GetBranchParams, opts ...ClientOption) (*GetBranchOK, error)

	GetBranches(params *GetBranchesParams, opts ...ClientOption) (*GetBranchesOK, error)

	GetNodeDetails(params *GetNodeDetailsParams, opts ...ClientOption) (*GetNodeDetailsOK, error)

	GetPipelineByName(params *GetPipelineByNameParams, opts ...ClientOption) (*GetPipelineByNameOK, error)

	GetPipelineRun(params *GetPipelineRunParams, opts ...ClientOption) (*GetPipelineRunOK, error)

	ListPipelineRuns(params *ListPipelineRunsParams, opts ...ClientOption) (*ListPipelineRunsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CheckCron checks cron script compile
*/
func (a *Client) CheckCron(params *CheckCronParams, opts ...ClientOption) (*CheckCronOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckCronParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CheckCron",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/checkCron",
		ProducesMediaTypes: []string{"application/json", "charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckCronReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckCronOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckCron: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckScriptCompile checks pipeline script compile
*/
func (a *Client) CheckScriptCompile(params *CheckScriptCompileParams, opts ...ClientOption) (*CheckScriptCompileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckScriptCompileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CheckScriptCompile",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/checkScriptCompile",
		ProducesMediaTypes: []string{"application/json", "charset=utf-8"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded", "charset=utf-8"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckScriptCompileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckScriptCompileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CheckScriptCompile: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePipeline creates the pipeline of the specified devops for the current user
*/
func (a *Client) CreatePipeline(params *CreatePipelineParams, opts ...ClientOption) (*CreatePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreatePipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{devops}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeletePipeline deletes the pipeline of the specified devops for the current user
*/
func (a *Client) DeletePipeline(params *DeletePipelineParams, opts ...ClientOption) (*DeletePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeletePipeline",
		Method:             "DELETE",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{devops}/pipelines/{pipeline}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeletePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeletePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetArtifacts gets all artifacts in the specified pipeline
*/
func (a *Client) GetArtifacts(params *GetArtifactsParams, opts ...ClientOption) (*GetArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetArtifacts",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetArtifactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchArtifacts multis branches pipeline get all artifacts generated from the specified run of the pipeline branch
*/
func (a *Client) GetBranchArtifacts(params *GetBranchArtifactsParams, opts ...ClientOption) (*GetBranchArtifactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchArtifactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchArtifacts",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchArtifactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchArtifactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchArtifacts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchNodeSteps multis branches pipeline get all steps in the specified node
*/
func (a *Client) GetBranchNodeSteps(params *GetBranchNodeStepsParams, opts ...ClientOption) (*GetBranchNodeStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchNodeStepsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchNodeSteps",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchNodeStepsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchNodeStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchNodeSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchNodesDetail multis branches pipeline get steps details in an activity node for a node the steps which is defined inside the node
*/
func (a *Client) GetBranchNodesDetail(params *GetBranchNodesDetailParams, opts ...ClientOption) (*GetBranchNodesDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchNodesDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchNodesDetail",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodesdetail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchNodesDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchNodesDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchNodesDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchPipeline multis branches pipeline get the specified branch pipeline of the dev ops project
*/
func (a *Client) GetBranchPipeline(params *GetBranchPipelineParams, opts ...ClientOption) (*GetBranchPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchPipeline",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchPipelineRun multis branches pipeline get details in the specified pipeline activity
*/
func (a *Client) GetBranchPipelineRun(params *GetBranchPipelineRunParams, opts ...ClientOption) (*GetBranchPipelineRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchPipelineRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchPipelineRun",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchPipelineRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchPipelineRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchPipelineRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchPipelineRunNodes multis branches pipeline get run nodes
*/
func (a *Client) GetBranchPipelineRunNodes(params *GetBranchPipelineRunNodesParams, opts ...ClientOption) (*GetBranchPipelineRunNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchPipelineRunNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchPipelineRunNodes",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchPipelineRunNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchPipelineRunNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchPipelineRunNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchRunLog multis branches pipeline get run logs of the specified pipeline activity
*/
func (a *Client) GetBranchRunLog(params *GetBranchRunLogParams, opts ...ClientOption) (*GetBranchRunLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchRunLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchRunLog",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/log",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchRunLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchRunLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchRunLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranchStepLog multis branches pipeline get the step logs in the specified pipeline activity
*/
func (a *Client) GetBranchStepLog(params *GetBranchStepLogParams, opts ...ClientOption) (*GetBranchStepLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchStepLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetBranchStepLog",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps/{step}/log",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchStepLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchStepLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBranchStepLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConsoleLog gets scan reponsitory logs in the specified pipeline
*/
func (a *Client) GetConsoleLog(params *GetConsoleLogParams, opts ...ClientOption) (*GetConsoleLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsoleLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetConsoleLog",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/consolelog",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsoleLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsoleLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsoleLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCrumb gets crumb issuer a crumb issuer represents an algorithm to generate a nonce value known as a crumb to counter cross site request forgery exploits crumbs are typically hashes incorporating information that uniquely identifies an agent that sends a request along with a guarded secret so that the crumb value cannot be forged by a third party
*/
func (a *Client) GetCrumb(params *GetCrumbParams, opts ...ClientOption) (*GetCrumbOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCrumbParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCrumb",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/crumbissuer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCrumbReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCrumbOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetCrumb: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMultiBranchesPipelineSonarStatusHandler gets the sonar quality check information for the specified pipeline branch of the dev ops project more info https docs sonarqube org 7 4 user guide metric definitions
*/
func (a *Client) GetMultiBranchesPipelineSonarStatusHandler(params *GetMultiBranchesPipelineSonarStatusHandlerParams, opts ...ClientOption) (*GetMultiBranchesPipelineSonarStatusHandlerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMultiBranchesPipelineSonarStatusHandlerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetMultiBranchesPipelineSonarStatusHandler",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/sonarstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMultiBranchesPipelineSonarStatusHandlerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMultiBranchesPipelineSonarStatusHandlerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMultiBranchesPipelineSonarStatusHandler: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNodeSteps gets all steps in the specified node
*/
func (a *Client) GetNodeSteps(params *GetNodeStepsParams, opts ...ClientOption) (*GetNodeStepsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStepsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNodeSteps",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeStepsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeStepsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNodeSteps: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNodesDetail gets steps details inside a activity node for a node the steps which defined inside the node
*/
func (a *Client) GetNodesDetail(params *GetNodesDetailParams, opts ...ClientOption) (*GetNodesDetailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodesDetailParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetNodesDetail",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/nodesdetail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodesDetailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodesDetailOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetNodesDetail: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipeline gets the specified pipeline of the dev ops project
*/
func (a *Client) GetPipeline(params *GetPipelineParams, opts ...ClientOption) (*GetPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipeline",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineBranch multis branches pipeline get all branches in the specified pipeline
*/
func (a *Client) GetPipelineBranch(params *GetPipelineBranchParams, opts ...ClientOption) (*GetPipelineBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipelineBranch",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipelineBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineRunNodes gets all nodes in the specified activity node is the stage in the pipeline task
*/
func (a *Client) GetPipelineRunNodes(params *GetPipelineRunNodesParams, opts ...ClientOption) (*GetPipelineRunNodesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineRunNodesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipelineRunNodes",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineRunNodesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineRunNodesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipelineRunNodes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineRunV1alpha2 gets details in the specified pipeline activity
*/
func (a *Client) GetPipelineRunV1alpha2(params *GetPipelineRunV1alpha2Params, opts ...ClientOption) (*GetPipelineRunV1alpha2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineRunV1alpha2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipelineRunV1alpha2",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineRunV1alpha2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineRunV1alpha2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipelineRunV1alpha2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineSonarStatusHandler gets the sonar quality information for the specified pipeline of the dev ops project more info https docs sonarqube org 7 4 user guide metric definitions
*/
func (a *Client) GetPipelineSonarStatusHandler(params *GetPipelineSonarStatusHandlerParams, opts ...ClientOption) (*GetPipelineSonarStatusHandlerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineSonarStatusHandlerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetPipelineSonarStatusHandler",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/sonarstatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineSonarStatusHandlerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineSonarStatusHandlerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPipelineSonarStatusHandler: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRunLog gets run logs of the specified pipeline activity
*/
func (a *Client) GetRunLog(params *GetRunLogParams, opts ...ClientOption) (*GetRunLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRunLog",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/log",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRunLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRunLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStepLog gets pipelines step log
*/
func (a *Client) GetStepLog(params *GetStepLogParams, opts ...ClientOption) (*GetStepLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStepLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetStepLog",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetStepLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStepLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetStepLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPipeline lists the pipelines of the specified devops for the current user
*/
func (a *Client) ListPipeline(params *ListPipelineParams, opts ...ClientOption) (*ListPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPipeline",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{devops}/pipelines",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPipelineRunsV1alpha2 gets all runs of the specified pipeline
*/
func (a *Client) ListPipelineRunsV1alpha2(params *ListPipelineRunsV1alpha2Params, opts ...ClientOption) (*ListPipelineRunsV1alpha2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPipelineRunsV1alpha2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPipelineRunsV1alpha2",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPipelineRunsV1alpha2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPipelineRunsV1alpha2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPipelineRunsV1alpha2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPipelines searches dev ops resource more info https github com jenkinsci blueocean plugin tree master blueocean rest get pipelines across organization
*/
func (a *Client) ListPipelines(params *ListPipelinesParams, opts ...ClientOption) (*ListPipelinesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPipelinesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListPipelines",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPipelinesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPipelinesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPipelines: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReplayBranchPipeline multis branches pipeline replay the specified pipeline of the dev ops project
*/
func (a *Client) ReplayBranchPipeline(params *ReplayBranchPipelineParams, opts ...ClientOption) (*ReplayBranchPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplayBranchPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReplayBranchPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/replay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplayBranchPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplayBranchPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReplayBranchPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ReplayPipeline replays pipeline
*/
func (a *Client) ReplayPipeline(params *ReplayPipelineParams, opts ...ClientOption) (*ReplayPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplayPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ReplayPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/replay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplayPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplayPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ReplayPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunBranchPipeline multis branches pipeline run the specified pipeline of the dev ops project
*/
func (a *Client) RunBranchPipeline(params *RunBranchPipelineParams, opts ...ClientOption) (*RunBranchPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunBranchPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunBranchPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunBranchPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunBranchPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunBranchPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RunPipeline runs pipeline
*/
func (a *Client) RunPipeline(params *RunPipelineParams, opts ...ClientOption) (*RunPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RunPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RunPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RunPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RunPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ScanBranch scans remote repository start a build if have new branch
*/
func (a *Client) ScanBranch(params *ScanBranchParams, opts ...ClientOption) (*ScanBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScanBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ScanBranch",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/scan",
		ProducesMediaTypes: []string{"text/html; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ScanBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScanBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ScanBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopBranchPipeline multis branches pipeline stop the specified pipeline of the dev ops project
*/
func (a *Client) StopBranchPipeline(params *StopBranchPipelineParams, opts ...ClientOption) (*StopBranchPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopBranchPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopBranchPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopBranchPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopBranchPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopBranchPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopPipeline stops pipeline
*/
func (a *Client) StopPipeline(params *StopPipelineParams, opts ...ClientOption) (*StopPipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StopPipeline",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopPipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopPipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitBranchInputStep multis branches pipeline proceed or break the paused pipeline which waiting for user input
*/
func (a *Client) SubmitBranchInputStep(params *SubmitBranchInputStepParams, opts ...ClientOption) (*SubmitBranchInputStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitBranchInputStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubmitBranchInputStep",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/branches/{branch}/runs/{run}/nodes/{node}/steps/{step}",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubmitBranchInputStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitBranchInputStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubmitBranchInputStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SubmitInputStep proceeds or break the paused pipeline which is waiting for user input
*/
func (a *Client) SubmitInputStep(params *SubmitInputStepParams, opts ...ClientOption) (*SubmitInputStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitInputStepParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SubmitInputStep",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha2/namespaces/{devops}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
		ProducesMediaTypes: []string{"text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubmitInputStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitInputStepOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SubmitInputStep: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdatePipeline puts the pipeline of the specified devops for the current user
*/
func (a *Client) UpdatePipeline(params *UpdatePipelineParams, opts ...ClientOption) (*UpdatePipelineOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePipelineParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdatePipeline",
		Method:             "PUT",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{devops}/pipelines/{pipeline}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdatePipelineReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdatePipelineOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdatePipeline: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreatePipelineRun creates a pipeline run for the specified pipeline
*/
func (a *Client) CreatePipelineRun(params *CreatePipelineRunParams, opts ...ClientOption) (*CreatePipelineRunCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePipelineRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPipelineRun",
		Method:             "POST",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelines/{pipeline}/pipelineruns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePipelineRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePipelineRunCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createPipelineRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DownloadArtifact download artifact API
*/
func (a *Client) DownloadArtifact(params *DownloadArtifactParams, opts ...ClientOption) (*DownloadArtifactOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDownloadArtifactParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "downloadArtifact",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelineruns/{pipelinerun}/artifacts/download",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DownloadArtifactReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DownloadArtifactOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for downloadArtifact: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranch pagings query branches of multi branch pipeline
*/
func (a *Client) GetBranch(params *GetBranchParams, opts ...ClientOption) (*GetBranchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBranch",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelines/{pipeline}/branches/{branch}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBranch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBranches pagings query branches of multi branch pipeline
*/
func (a *Client) GetBranches(params *GetBranchesParams, opts ...ClientOption) (*GetBranchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBranches",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelines/{pipeline}/branches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBranches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNodeDetails gets node details including steps and approvable for a given pipeline
*/
func (a *Client) GetNodeDetails(params *GetNodeDetailsParams, opts ...ClientOption) (*GetNodeDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNodeDetails",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelineruns/{pipelinerun}/nodedetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNodeDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNodeDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNodeDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineByName gets the pipeline of the specified devops for the current user
*/
func (a *Client) GetPipelineByName(params *GetPipelineByNameParams, opts ...ClientOption) (*GetPipelineByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineByNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPipelineByName",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{devops}/pipelines/{pipeline}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineByNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineByName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetPipelineRun gets a pipeline run for a specified pipeline
*/
func (a *Client) GetPipelineRun(params *GetPipelineRunParams, opts ...ClientOption) (*GetPipelineRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPipelineRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPipelineRun",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelineruns/{pipelinerun}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPipelineRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPipelineRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPipelineRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListPipelineRuns gets all runs of the specified pipeline
*/
func (a *Client) ListPipelineRuns(params *ListPipelineRunsParams, opts ...ClientOption) (*ListPipelineRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPipelineRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPipelineRuns",
		Method:             "GET",
		PathPattern:        "/kapis/devops.kubesphere.io/v1alpha3/namespaces/{namespace}/pipelines/{pipeline}/pipelineruns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListPipelineRunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPipelineRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPipelineRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
