// Code generated by go-swagger; DO NOT EDIT.

package dev_ops_pipeline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetBranchesParams creates a new GetBranchesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetBranchesParams() *GetBranchesParams {
	return &GetBranchesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetBranchesParamsWithTimeout creates a new GetBranchesParams object
// with the ability to set a timeout on a request.
func NewGetBranchesParamsWithTimeout(timeout time.Duration) *GetBranchesParams {
	return &GetBranchesParams{
		timeout: timeout,
	}
}

// NewGetBranchesParamsWithContext creates a new GetBranchesParams object
// with the ability to set a context for a request.
func NewGetBranchesParamsWithContext(ctx context.Context) *GetBranchesParams {
	return &GetBranchesParams{
		Context: ctx,
	}
}

// NewGetBranchesParamsWithHTTPClient creates a new GetBranchesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetBranchesParamsWithHTTPClient(client *http.Client) *GetBranchesParams {
	return &GetBranchesParams{
		HTTPClient: client,
	}
}

/*
GetBranchesParams contains all the parameters to send to the API endpoint

	for the get branches operation.

	Typically these are written to a http.Request.
*/
type GetBranchesParams struct {

	/* Ascending.

	   sort parameters, e.g. ascending=false

	   Default: "ascending=false"
	*/
	Ascending *string

	/* Filter.

	   Pipeline filter, allowed values: origin, pull_requests and no-folders
	*/
	Filter *string

	/* Limit.

	   limit
	*/
	Limit *string

	/* Namespace.

	   Namespace of the Pipeline
	*/
	Namespace string

	/* Page.

	   page

	   Format: page=%d
	   Default: "page=1"
	*/
	Page *string

	/* Pipeline.

	   Name of the Pipeline
	*/
	Pipeline string

	/* SortBy.

	   sort parameters, e.g. orderBy=createTime
	*/
	SortBy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get branches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBranchesParams) WithDefaults() *GetBranchesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get branches params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetBranchesParams) SetDefaults() {
	var (
		ascendingDefault = string("ascending=false")

		pageDefault = string("page=1")
	)

	val := GetBranchesParams{
		Ascending: &ascendingDefault,
		Page:      &pageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get branches params
func (o *GetBranchesParams) WithTimeout(timeout time.Duration) *GetBranchesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get branches params
func (o *GetBranchesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get branches params
func (o *GetBranchesParams) WithContext(ctx context.Context) *GetBranchesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get branches params
func (o *GetBranchesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get branches params
func (o *GetBranchesParams) WithHTTPClient(client *http.Client) *GetBranchesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get branches params
func (o *GetBranchesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAscending adds the ascending to the get branches params
func (o *GetBranchesParams) WithAscending(ascending *string) *GetBranchesParams {
	o.SetAscending(ascending)
	return o
}

// SetAscending adds the ascending to the get branches params
func (o *GetBranchesParams) SetAscending(ascending *string) {
	o.Ascending = ascending
}

// WithFilter adds the filter to the get branches params
func (o *GetBranchesParams) WithFilter(filter *string) *GetBranchesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get branches params
func (o *GetBranchesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the get branches params
func (o *GetBranchesParams) WithLimit(limit *string) *GetBranchesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get branches params
func (o *GetBranchesParams) SetLimit(limit *string) {
	o.Limit = limit
}

// WithNamespace adds the namespace to the get branches params
func (o *GetBranchesParams) WithNamespace(namespace string) *GetBranchesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get branches params
func (o *GetBranchesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WithPage adds the page to the get branches params
func (o *GetBranchesParams) WithPage(page *string) *GetBranchesParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get branches params
func (o *GetBranchesParams) SetPage(page *string) {
	o.Page = page
}

// WithPipeline adds the pipeline to the get branches params
func (o *GetBranchesParams) WithPipeline(pipeline string) *GetBranchesParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the get branches params
func (o *GetBranchesParams) SetPipeline(pipeline string) {
	o.Pipeline = pipeline
}

// WithSortBy adds the sortBy to the get branches params
func (o *GetBranchesParams) WithSortBy(sortBy *string) *GetBranchesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get branches params
func (o *GetBranchesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WriteToRequest writes these params to a swagger request
func (o *GetBranchesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Ascending != nil {

		// query param ascending
		var qrAscending string

		if o.Ascending != nil {
			qrAscending = *o.Ascending
		}
		qAscending := qrAscending
		if qAscending != "" {

			if err := r.SetQueryParam("ascending", qAscending); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit string

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := qrLimit
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// path param namespace
	if err := r.SetPathParam("namespace", o.Namespace); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage string

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := qrPage
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	// path param pipeline
	if err := r.SetPathParam("pipeline", o.Pipeline); err != nil {
		return err
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
