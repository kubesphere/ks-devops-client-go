// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevopsPipeline devops pipeline
//
// swagger:model devops.Pipeline
type DevopsPipeline struct {

	// Itâ€™s a fully qualified name and is an identifier of the producer of this resource's capability.
	Class string `json:"_class,omitempty"`

	// references the reachable path to this resource.
	Links *Links `json:"_links,omitempty"`

	// the list of all actions.
	Actions []DevopsPipelineActions `json:"actions"`

	// Add annotations from crd
	Annotations map[string]string `json:"annotations,omitempty"`

	// branch names
	BranchNames []string `json:"branchNames"`

	// disable or not, if disabled, can not do any action.
	Disabled DevopsPipelineDisabled `json:"disabled,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// estimated duration time, unit is millis
	EstimatedDurationInMillis int32 `json:"estimatedDurationInMillis,omitempty"`

	// full display name
	FullDisplayName string `json:"fullDisplayName,omitempty"`

	// full name
	FullName string `json:"fullName,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number of failing branches
	NumberOfFailingBranches int32 `json:"numberOfFailingBranches,omitempty"`

	// number of failing pull requests
	NumberOfFailingPullRequests int32 `json:"numberOfFailingPullRequests,omitempty"`

	// number of folders
	NumberOfFolders int32 `json:"numberOfFolders,omitempty"`

	// number of pipelines
	NumberOfPipelines int32 `json:"numberOfPipelines,omitempty"`

	// number of successful pull requests
	NumberOfSuccessfulBranches int32 `json:"numberOfSuccessfulBranches,omitempty"`

	// number of successful pull requests
	NumberOfSuccessfulPullRequests int32 `json:"numberOfSuccessfulPullRequests,omitempty"`

	// the name of organization
	Organization string `json:"organization,omitempty"`

	// parameters of pipeline, a pipeline can define list of parameters pipeline job expects.
	Parameters DevopsPipelineParameters `json:"parameters,omitempty"`

	// permissions
	Permissions *Permissions `json:"permissions,omitempty"`

	// pipeline folder names
	PipelineFolderNames []DevopsPipelinePipelineFolderNames `json:"pipelineFolderNames"`

	// scm source
	ScmSource *ScmSource `json:"scmSource,omitempty"`

	// total number of branches
	TotalNumberOfBranches int32 `json:"totalNumberOfBranches,omitempty"`

	// total number of pull requests
	TotalNumberOfPullRequests int32 `json:"totalNumberOfPullRequests,omitempty"`

	// the score to description the result of pipeline activity
	// Required: true
	WeatherScore *int32 `json:"weatherScore"`
}

// Validate validates this devops pipeline
func (m *DevopsPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScmSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeatherScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsPipeline) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipeline) validatePermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	if m.Permissions != nil {
		if err := m.Permissions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipeline) validateScmSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ScmSource) { // not required
		return nil
	}

	if m.ScmSource != nil {
		if err := m.ScmSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scmSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scmSource")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipeline) validateWeatherScore(formats strfmt.Registry) error {

	if err := validate.Required("weatherScore", "body", m.WeatherScore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devops pipeline based on the context it is used
func (m *DevopsPipeline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScmSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsPipeline) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {

		if swag.IsZero(m.Links) { // not required
			return nil
		}

		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipeline) contextValidatePermissions(ctx context.Context, formats strfmt.Registry) error {

	if m.Permissions != nil {

		if swag.IsZero(m.Permissions) { // not required
			return nil
		}

		if err := m.Permissions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("permissions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("permissions")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipeline) contextValidateScmSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ScmSource != nil {

		if swag.IsZero(m.ScmSource) { // not required
			return nil
		}

		if err := m.ScmSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scmSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scmSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevopsPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsPipeline) UnmarshalBinary(b []byte) error {
	var res DevopsPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
