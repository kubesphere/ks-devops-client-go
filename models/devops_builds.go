// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevopsBuilds devops builds
//
// swagger:model devops.Builds
type DevopsBuilds struct {

	// build number
	// Required: true
	BuildNumber *int64 `json:"buildNumber"`

	// build result
	// Required: true
	BuildResult DevopsBuildsBuildResult `json:"buildResult"`

	// marked
	// Required: true
	Marked *DevopsBuildRevision `json:"marked"`

	// revision
	// Required: true
	Revision *DevopsBuildRevision `json:"revision"`
}

// Validate validates this devops builds
func (m *DevopsBuilds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsBuilds) validateBuildNumber(formats strfmt.Registry) error {

	if err := validate.Required("buildNumber", "body", m.BuildNumber); err != nil {
		return err
	}

	return nil
}

func (m *DevopsBuilds) validateBuildResult(formats strfmt.Registry) error {

	if m.BuildResult == nil {
		return errors.Required("buildResult", "body", nil)
	}

	return nil
}

func (m *DevopsBuilds) validateMarked(formats strfmt.Registry) error {

	if err := validate.Required("marked", "body", m.Marked); err != nil {
		return err
	}

	if m.Marked != nil {
		if err := m.Marked.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marked")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsBuilds) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	if m.Revision != nil {
		if err := m.Revision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devops builds based on the context it is used
func (m *DevopsBuilds) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarked(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRevision(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsBuilds) contextValidateMarked(ctx context.Context, formats strfmt.Registry) error {

	if m.Marked != nil {

		if err := m.Marked.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marked")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marked")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsBuilds) contextValidateRevision(ctx context.Context, formats strfmt.Registry) error {

	if m.Revision != nil {

		if err := m.Revision.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("revision")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("revision")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevopsBuilds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsBuilds) UnmarshalBinary(b []byte) error {
	var res DevopsBuilds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
