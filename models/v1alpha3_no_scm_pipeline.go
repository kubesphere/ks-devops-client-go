// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V1alpha3NoScmPipeline v1alpha3 no scm pipeline
//
// swagger:model v1alpha3.NoScmPipeline
type V1alpha3NoScmPipeline struct {

	// description of pipeline
	Description string `json:"description,omitempty"`

	// Whether to prohibit the pipeline from running in parallel
	DisableConcurrent bool `json:"disable_concurrent,omitempty"`

	// Discarder of pipeline, managing when to drop a pipeline
	Discarder *V1alpha3DiscarderProperty `json:"discarder,omitempty"`

	// Generic webhook config
	GenericWebhook *V1alpha3GenericWebhook `json:"generic_webhook,omitempty"`

	// Jenkinsfile's content'
	Jenkinsfile string `json:"jenkinsfile,omitempty"`

	// name of pipeline
	// Required: true
	Name *string `json:"name"`

	// Parameters define of pipeline,user could pass param when run pipeline
	Parameters []*V1alpha3ParameterDefinition `json:"parameters"`

	// Remote api define to trigger pipeline run
	RemoteTrigger *V1alpha3RemoteTrigger `json:"remote_trigger,omitempty"`

	// Timer to trigger pipeline run
	TimerTrigger *V1alpha3TimerTrigger `json:"timer_trigger,omitempty"`
}

// Validate validates this v1alpha3 no scm pipeline
func (m *V1alpha3NoScmPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscarder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenericWebhook(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteTrigger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimerTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3NoScmPipeline) validateDiscarder(formats strfmt.Registry) error {
	if swag.IsZero(m.Discarder) { // not required
		return nil
	}

	if m.Discarder != nil {
		if err := m.Discarder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discarder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discarder")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) validateGenericWebhook(formats strfmt.Registry) error {
	if swag.IsZero(m.GenericWebhook) { // not required
		return nil
	}

	if m.GenericWebhook != nil {
		if err := m.GenericWebhook.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic_webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic_webhook")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3NoScmPipeline) validateRemoteTrigger(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteTrigger) { // not required
		return nil
	}

	if m.RemoteTrigger != nil {
		if err := m.RemoteTrigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_trigger")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) validateTimerTrigger(formats strfmt.Registry) error {
	if swag.IsZero(m.TimerTrigger) { // not required
		return nil
	}

	if m.TimerTrigger != nil {
		if err := m.TimerTrigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer_trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timer_trigger")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha3 no scm pipeline based on the context it is used
func (m *V1alpha3NoScmPipeline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscarder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenericWebhook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimerTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3NoScmPipeline) contextValidateDiscarder(ctx context.Context, formats strfmt.Registry) error {

	if m.Discarder != nil {

		if swag.IsZero(m.Discarder) { // not required
			return nil
		}

		if err := m.Discarder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discarder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discarder")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) contextValidateGenericWebhook(ctx context.Context, formats strfmt.Registry) error {

	if m.GenericWebhook != nil {

		if swag.IsZero(m.GenericWebhook) { // not required
			return nil
		}

		if err := m.GenericWebhook.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generic_webhook")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generic_webhook")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3NoScmPipeline) contextValidateRemoteTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteTrigger != nil {

		if swag.IsZero(m.RemoteTrigger) { // not required
			return nil
		}

		if err := m.RemoteTrigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remote_trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remote_trigger")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3NoScmPipeline) contextValidateTimerTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.TimerTrigger != nil {

		if swag.IsZero(m.TimerTrigger) { // not required
			return nil
		}

		if err := m.TimerTrigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timer_trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timer_trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha3NoScmPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha3NoScmPipeline) UnmarshalBinary(b []byte) error {
	var res V1alpha3NoScmPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
