// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SonarqubeSonarStatus sonarqube sonar status
//
// swagger:model sonarqube.SonarStatus
type SonarqubeSonarStatus struct {

	// general action
	GeneralAction *DevopsGeneralAction `json:"generalAction,omitempty"`

	// issues
	Issues *SonargoIssuesSearchObject `json:"issues,omitempty"`

	// measures
	Measures *SonargoMeasuresComponentObject `json:"measures,omitempty"`

	// task
	Task *SonargoCeTaskObject `json:"task,omitempty"`
}

// Validate validates this sonarqube sonar status
func (m *SonarqubeSonarStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGeneralAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMeasures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonarqubeSonarStatus) validateGeneralAction(formats strfmt.Registry) error {
	if swag.IsZero(m.GeneralAction) { // not required
		return nil
	}

	if m.GeneralAction != nil {
		if err := m.GeneralAction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generalAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generalAction")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) validateIssues(formats strfmt.Registry) error {
	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	if m.Issues != nil {
		if err := m.Issues.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issues")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) validateMeasures(formats strfmt.Registry) error {
	if swag.IsZero(m.Measures) { // not required
		return nil
	}

	if m.Measures != nil {
		if err := m.Measures.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("measures")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) validateTask(formats strfmt.Registry) error {
	if swag.IsZero(m.Task) { // not required
		return nil
	}

	if m.Task != nil {
		if err := m.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sonarqube sonar status based on the context it is used
func (m *SonarqubeSonarStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGeneralAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMeasures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonarqubeSonarStatus) contextValidateGeneralAction(ctx context.Context, formats strfmt.Registry) error {

	if m.GeneralAction != nil {

		if swag.IsZero(m.GeneralAction) { // not required
			return nil
		}

		if err := m.GeneralAction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("generalAction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("generalAction")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) contextValidateIssues(ctx context.Context, formats strfmt.Registry) error {

	if m.Issues != nil {

		if swag.IsZero(m.Issues) { // not required
			return nil
		}

		if err := m.Issues.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issues")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("issues")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) contextValidateMeasures(ctx context.Context, formats strfmt.Registry) error {

	if m.Measures != nil {

		if swag.IsZero(m.Measures) { // not required
			return nil
		}

		if err := m.Measures.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("measures")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("measures")
			}
			return err
		}
	}

	return nil
}

func (m *SonarqubeSonarStatus) contextValidateTask(ctx context.Context, formats strfmt.Registry) error {

	if m.Task != nil {

		if swag.IsZero(m.Task) { // not required
			return nil
		}

		if err := m.Task.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("task")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SonarqubeSonarStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SonarqubeSonarStatus) UnmarshalBinary(b []byte) error {
	var res SonarqubeSonarStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
