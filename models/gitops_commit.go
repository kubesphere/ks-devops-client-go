// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitopsCommit gitops commit
//
// swagger:model gitops.Commit
type GitopsCommit struct {

	// author
	// Required: true
	Author *ObjectSignature `json:"Author"`

	// committer
	// Required: true
	Committer *ObjectSignature `json:"Committer"`

	// hash
	// Required: true
	Hash *string `json:"Hash"`

	// merge tag
	// Required: true
	MergeTag *string `json:"MergeTag"`

	// message
	// Required: true
	Message *string `json:"Message"`

	// parent hashes
	// Required: true
	ParentHashes []string `json:"ParentHashes"`

	// tree hash
	// Required: true
	TreeHash *string `json:"TreeHash"`
}

// Validate validates this gitops commit
func (m *GitopsCommit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMergeTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentHashes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTreeHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitopsCommit) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("Author", "body", m.Author); err != nil {
		return err
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Author")
			}
			return err
		}
	}

	return nil
}

func (m *GitopsCommit) validateCommitter(formats strfmt.Registry) error {

	if err := validate.Required("Committer", "body", m.Committer); err != nil {
		return err
	}

	if m.Committer != nil {
		if err := m.Committer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Committer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Committer")
			}
			return err
		}
	}

	return nil
}

func (m *GitopsCommit) validateHash(formats strfmt.Registry) error {

	if err := validate.Required("Hash", "body", m.Hash); err != nil {
		return err
	}

	return nil
}

func (m *GitopsCommit) validateMergeTag(formats strfmt.Registry) error {

	if err := validate.Required("MergeTag", "body", m.MergeTag); err != nil {
		return err
	}

	return nil
}

func (m *GitopsCommit) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("Message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *GitopsCommit) validateParentHashes(formats strfmt.Registry) error {

	if err := validate.Required("ParentHashes", "body", m.ParentHashes); err != nil {
		return err
	}

	return nil
}

func (m *GitopsCommit) validateTreeHash(formats strfmt.Registry) error {

	if err := validate.Required("TreeHash", "body", m.TreeHash); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gitops commit based on the context it is used
func (m *GitopsCommit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitopsCommit) contextValidateAuthor(ctx context.Context, formats strfmt.Registry) error {

	if m.Author != nil {

		if err := m.Author.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Author")
			}
			return err
		}
	}

	return nil
}

func (m *GitopsCommit) contextValidateCommitter(ctx context.Context, formats strfmt.Registry) error {

	if m.Committer != nil {

		if err := m.Committer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Committer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Committer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitopsCommit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitopsCommit) UnmarshalBinary(b []byte) error {
	var res GitopsCommit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
