// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GitopsAddFilesInput gitops add files input
//
// swagger:model gitops.AddFilesInput
type GitopsAddFilesInput struct {

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// files
	// Required: true
	Files []*GitopsFileNameData `json:"files"`

	// message
	// Required: true
	Message *string `json:"message"`

	// overwrite
	// Required: true
	Overwrite *bool `json:"overwrite"`

	// unpack
	// Required: true
	Unpack *bool `json:"unpack"`

	// uploaded
	// Required: true
	Uploaded *bool `json:"uploaded"`
}

// Validate validates this gitops add files input
func (m *GitopsAddFilesInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverwrite(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnpack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploaded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitopsAddFilesInput) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *GitopsAddFilesInput) validateFiles(formats strfmt.Registry) error {

	if err := validate.Required("files", "body", m.Files); err != nil {
		return err
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GitopsAddFilesInput) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *GitopsAddFilesInput) validateOverwrite(formats strfmt.Registry) error {

	if err := validate.Required("overwrite", "body", m.Overwrite); err != nil {
		return err
	}

	return nil
}

func (m *GitopsAddFilesInput) validateUnpack(formats strfmt.Registry) error {

	if err := validate.Required("unpack", "body", m.Unpack); err != nil {
		return err
	}

	return nil
}

func (m *GitopsAddFilesInput) validateUploaded(formats strfmt.Registry) error {

	if err := validate.Required("uploaded", "body", m.Uploaded); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this gitops add files input based on the context it is used
func (m *GitopsAddFilesInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GitopsAddFilesInput) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {

			if swag.IsZero(m.Files[i]) { // not required
				return nil
			}

			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GitopsAddFilesInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GitopsAddFilesInput) UnmarshalBinary(b []byte) error {
	var res GitopsAddFilesInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
