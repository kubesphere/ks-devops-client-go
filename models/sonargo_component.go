// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SonargoComponent sonargo component
//
// swagger:model sonargo.Component
type SonargoComponent struct {

	// analysis date
	AnalysisDate string `json:"analysisDate,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// enabled
	Enabled bool `json:"enabled,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// language
	Language string `json:"language,omitempty"`

	// last analysis date
	LastAnalysisDate string `json:"lastAnalysisDate,omitempty"`

	// leak period date
	LeakPeriodDate string `json:"leakPeriodDate,omitempty"`

	// long name
	LongName string `json:"longName,omitempty"`

	// measures
	Measures []*SonargoSonarMeasure `json:"measures"`

	// name
	Name string `json:"name,omitempty"`

	// organization
	Organization string `json:"organization,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// project
	Project string `json:"project,omitempty"`

	// qualifier
	Qualifier string `json:"qualifier,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// uuid
	UUID string `json:"uuid,omitempty"`

	// version
	Version string `json:"version,omitempty"`

	// visibility
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this sonargo component
func (m *SonargoComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeasures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonargoComponent) validateMeasures(formats strfmt.Registry) error {
	if swag.IsZero(m.Measures) { // not required
		return nil
	}

	for i := 0; i < len(m.Measures); i++ {
		if swag.IsZero(m.Measures[i]) { // not required
			continue
		}

		if m.Measures[i] != nil {
			if err := m.Measures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("measures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("measures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sonargo component based on the context it is used
func (m *SonargoComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeasures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonargoComponent) contextValidateMeasures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Measures); i++ {

		if m.Measures[i] != nil {

			if swag.IsZero(m.Measures[i]) { // not required
				return nil
			}

			if err := m.Measures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("measures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("measures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SonargoComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SonargoComponent) UnmarshalBinary(b []byte) error {
	var res SonargoComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
