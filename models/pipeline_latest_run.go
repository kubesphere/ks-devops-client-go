// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PipelineLatestRun pipeline latest run
//
// swagger:model pipeline.LatestRun
type PipelineLatestRun struct {

	// causes
	Causes []*PipelineCause `json:"causes"`

	// duration in millis
	DurationInMillis int64 `json:"durationInMillis,omitempty"`

	// end time
	EndTime *JobTime `json:"endTime,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pipeline
	Pipeline string `json:"pipeline,omitempty"`

	// result
	Result string `json:"result,omitempty"`

	// start time
	StartTime *JobTime `json:"startTime,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this pipeline latest run
func (m *PipelineLatestRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCauses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineLatestRun) validateCauses(formats strfmt.Registry) error {
	if swag.IsZero(m.Causes) { // not required
		return nil
	}

	for i := 0; i < len(m.Causes); i++ {
		if swag.IsZero(m.Causes[i]) { // not required
			continue
		}

		if m.Causes[i] != nil {
			if err := m.Causes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("causes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("causes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineLatestRun) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineLatestRun) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pipeline latest run based on the context it is used
func (m *PipelineLatestRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCauses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineLatestRun) contextValidateCauses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Causes); i++ {

		if m.Causes[i] != nil {

			if swag.IsZero(m.Causes[i]) { // not required
				return nil
			}

			if err := m.Causes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("causes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("causes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineLatestRun) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if swag.IsZero(m.EndTime) { // not required
			return nil
		}

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineLatestRun) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if swag.IsZero(m.StartTime) { // not required
			return nil
		}

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineLatestRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineLatestRun) UnmarshalBinary(b []byte) error {
	var res PipelineLatestRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
