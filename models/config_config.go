// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigConfig config config
//
// swagger:model config.Config
type ConfigConfig struct {

	// author
	// Required: true
	Author *Author `json:"Author"`

	// branches
	// Required: true
	Branches map[string]ConfigBranch `json:"Branches"`

	// committer
	// Required: true
	Committer *Committer `json:"Committer"`

	// core
	// Required: true
	Core *Core `json:"Core"`

	// extensions
	// Required: true
	Extensions *Extensions `json:"Extensions"`

	// init
	// Required: true
	Init *Init `json:"Init"`

	// pack
	// Required: true
	Pack *Pack `json:"Pack"`

	// raw
	// Required: true
	Raw *ConfigConfig `json:"Raw"`

	// remotes
	// Required: true
	Remotes map[string]ConfigRemoteConfig `json:"Remotes"`

	// submodules
	// Required: true
	Submodules map[string]ConfigSubmodule `json:"Submodules"`

	// u r ls
	// Required: true
	URLs map[string]ConfigURL `json:"URLs"`

	// user
	// Required: true
	User *User `json:"User"`
}

// Validate validates this config config
func (m *ConfigConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranches(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemotes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmodules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigConfig) validateAuthor(formats strfmt.Registry) error {

	if err := validate.Required("Author", "body", m.Author); err != nil {
		return err
	}

	if m.Author != nil {
		if err := m.Author.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Author")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateBranches(formats strfmt.Registry) error {

	if err := validate.Required("Branches", "body", m.Branches); err != nil {
		return err
	}

	for k := range m.Branches {

		if err := validate.Required("Branches"+"."+k, "body", m.Branches[k]); err != nil {
			return err
		}
		if val, ok := m.Branches[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Branches" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Branches" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) validateCommitter(formats strfmt.Registry) error {

	if err := validate.Required("Committer", "body", m.Committer); err != nil {
		return err
	}

	if m.Committer != nil {
		if err := m.Committer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Committer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Committer")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateCore(formats strfmt.Registry) error {

	if err := validate.Required("Core", "body", m.Core); err != nil {
		return err
	}

	if m.Core != nil {
		if err := m.Core.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Core")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Core")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateExtensions(formats strfmt.Registry) error {

	if err := validate.Required("Extensions", "body", m.Extensions); err != nil {
		return err
	}

	if m.Extensions != nil {
		if err := m.Extensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Extensions")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateInit(formats strfmt.Registry) error {

	if err := validate.Required("Init", "body", m.Init); err != nil {
		return err
	}

	if m.Init != nil {
		if err := m.Init.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Init")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validatePack(formats strfmt.Registry) error {

	if err := validate.Required("Pack", "body", m.Pack); err != nil {
		return err
	}

	if m.Pack != nil {
		if err := m.Pack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Pack")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("Raw", "body", m.Raw); err != nil {
		return err
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Raw")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) validateRemotes(formats strfmt.Registry) error {

	if err := validate.Required("Remotes", "body", m.Remotes); err != nil {
		return err
	}

	for k := range m.Remotes {

		if err := validate.Required("Remotes"+"."+k, "body", m.Remotes[k]); err != nil {
			return err
		}
		if val, ok := m.Remotes[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Remotes" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Remotes" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) validateSubmodules(formats strfmt.Registry) error {

	if err := validate.Required("Submodules", "body", m.Submodules); err != nil {
		return err
	}

	for k := range m.Submodules {

		if err := validate.Required("Submodules"+"."+k, "body", m.Submodules[k]); err != nil {
			return err
		}
		if val, ok := m.Submodules[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Submodules" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Submodules" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) validateURLs(formats strfmt.Registry) error {

	if err := validate.Required("URLs", "body", m.URLs); err != nil {
		return err
	}

	for k := range m.URLs {

		if err := validate.Required("URLs"+"."+k, "body", m.URLs[k]); err != nil {
			return err
		}
		if val, ok := m.URLs[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("URLs" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("URLs" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("User", "body", m.User); err != nil {
		return err
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config config based on the context it is used
func (m *ConfigConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBranches(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePack(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemotes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubmodules(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURLs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigConfig) contextValidateAuthor(ctx context.Context, formats strfmt.Registry) error {

	if m.Author != nil {

		if err := m.Author.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Author")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Author")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateBranches(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("Branches", "body", m.Branches); err != nil {
		return err
	}

	for k := range m.Branches {

		if val, ok := m.Branches[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) contextValidateCommitter(ctx context.Context, formats strfmt.Registry) error {

	if m.Committer != nil {

		if err := m.Committer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Committer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Committer")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateCore(ctx context.Context, formats strfmt.Registry) error {

	if m.Core != nil {

		if err := m.Core.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Core")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Core")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateExtensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Extensions != nil {

		if err := m.Extensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Extensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Extensions")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateInit(ctx context.Context, formats strfmt.Registry) error {

	if m.Init != nil {

		if err := m.Init.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Init")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Init")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidatePack(ctx context.Context, formats strfmt.Registry) error {

	if m.Pack != nil {

		if err := m.Pack.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pack")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Pack")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {

		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Raw")
			}
			return err
		}
	}

	return nil
}

func (m *ConfigConfig) contextValidateRemotes(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("Remotes", "body", m.Remotes); err != nil {
		return err
	}

	for k := range m.Remotes {

		if val, ok := m.Remotes[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) contextValidateSubmodules(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("Submodules", "body", m.Submodules); err != nil {
		return err
	}

	for k := range m.Submodules {

		if val, ok := m.Submodules[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) contextValidateURLs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("URLs", "body", m.URLs); err != nil {
		return err
	}

	for k := range m.URLs {

		if val, ok := m.URLs[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ConfigConfig) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigConfig) UnmarshalBinary(b []byte) error {
	var res ConfigConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
