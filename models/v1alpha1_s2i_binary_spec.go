// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1S2iBinarySpec v1alpha1 s2i binary spec
//
// swagger:model v1alpha1.S2iBinarySpec
type V1alpha1S2iBinarySpec struct {

	// download URL
	DownloadURL string `json:"downloadURL,omitempty"`

	// file name
	FileName string `json:"fileName,omitempty"`

	// md5
	Md5 string `json:"md5,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// upload time stamp
	// Format: date-time
	UploadTimeStamp V1Time `json:"uploadTimeStamp,omitempty"`
}

// Validate validates this v1alpha1 s2i binary spec
func (m *V1alpha1S2iBinarySpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUploadTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1S2iBinarySpec) validateUploadTimeStamp(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadTimeStamp) { // not required
		return nil
	}

	if err := m.UploadTimeStamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uploadTimeStamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uploadTimeStamp")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v1alpha1 s2i binary spec based on the context it is used
func (m *V1alpha1S2iBinarySpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUploadTimeStamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1S2iBinarySpec) contextValidateUploadTimeStamp(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UploadTimeStamp) { // not required
		return nil
	}

	if err := m.UploadTimeStamp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("uploadTimeStamp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("uploadTimeStamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1S2iBinarySpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1S2iBinarySpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1S2iBinarySpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
