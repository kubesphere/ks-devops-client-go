// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DevopsPipelineRunNodes devops pipeline run nodes
//
// swagger:model devops.PipelineRunNodes
type DevopsPipelineRunNodes struct {

	// Itâ€™s a fully qualified name and is an identifier of the producer of this resource's capability.
	Class string `json:"_class,omitempty"`

	// references the reachable path to this resource
	Links *Links `json:"_links,omitempty"`

	// the list of all actions
	Actions []DevopsPipelineRunNodesActions `json:"actions"`

	// the cause of blockage
	CauseOfBlockage DevopsPipelineRunNodesCauseOfBlockage `json:"causeOfBlockage,omitempty"`

	// display description
	DisplayDescription DevopsPipelineRunNodesDisplayDescription `json:"displayDescription,omitempty"`

	// display name
	DisplayName string `json:"displayName,omitempty"`

	// duration time in mullis
	DurationInMillis int32 `json:"durationInMillis,omitempty"`

	// edges
	Edges []DevopsPipelineRunNodesEdges `json:"edges"`

	// first parent
	FirstParent DevopsPipelineRunNodesFirstParent `json:"firstParent,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// the action should user input
	Input *DevopsInput `json:"input,omitempty"`

	// restartable or not
	Restartable bool `json:"restartable,omitempty"`

	// the result of pipeline run. e.g. SUCCESS
	Result string `json:"result,omitempty"`

	// the time of start
	StartTime string `json:"startTime,omitempty"`

	// run state. e.g. FINISHED
	State string `json:"state,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this devops pipeline run nodes
func (m *DevopsPipelineRunNodes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsPipelineRunNodes) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipelineRunNodes) validateInput(formats strfmt.Registry) error {
	if swag.IsZero(m.Input) { // not required
		return nil
	}

	if m.Input != nil {
		if err := m.Input.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this devops pipeline run nodes based on the context it is used
func (m *DevopsPipelineRunNodes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsPipelineRunNodes) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {

		if swag.IsZero(m.Links) { // not required
			return nil
		}

		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_links")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("_links")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsPipelineRunNodes) contextValidateInput(ctx context.Context, formats strfmt.Registry) error {

	if m.Input != nil {

		if swag.IsZero(m.Input) { // not required
			return nil
		}

		if err := m.Input.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("input")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("input")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevopsPipelineRunNodes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsPipelineRunNodes) UnmarshalBinary(b []byte) error {
	var res DevopsPipelineRunNodes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
