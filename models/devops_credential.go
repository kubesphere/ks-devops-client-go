// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DevopsCredential devops credential
//
// swagger:model devops.Credential
type DevopsCredential struct {

	// Credential's description'
	Description string `json:"description,omitempty"`

	// Credential's display name
	DisplayName string `json:"display_name,omitempty"`

	// Credential's domain,In ks we only use the default domain, default '_''
	Domain string `json:"domain,omitempty"`

	// usage of the Credential
	Fingerprint *DevopsCredentialFingerprint `json:"fingerprint,omitempty"`

	// Id of Credential, e.g. dockerhub-id
	// Required: true
	ID *string `json:"id"`

	// Type of Credential, e.g. ssh/kubeconfig
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this devops credential
func (m *DevopsCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFingerprint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsCredential) validateFingerprint(formats strfmt.Registry) error {
	if swag.IsZero(m.Fingerprint) { // not required
		return nil
	}

	if m.Fingerprint != nil {
		if err := m.Fingerprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fingerprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fingerprint")
			}
			return err
		}
	}

	return nil
}

func (m *DevopsCredential) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DevopsCredential) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this devops credential based on the context it is used
func (m *DevopsCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFingerprint(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DevopsCredential) contextValidateFingerprint(ctx context.Context, formats strfmt.Registry) error {

	if m.Fingerprint != nil {

		if swag.IsZero(m.Fingerprint) { // not required
			return nil
		}

		if err := m.Fingerprint.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fingerprint")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fingerprint")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DevopsCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DevopsCredential) UnmarshalBinary(b []byte) error {
	var res DevopsCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
