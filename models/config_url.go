// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigURL config URL
//
// swagger:model config.URL
type ConfigURL struct {

	// instead of
	// Required: true
	InsteadOf *string `json:"InsteadOf"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// raw
	// Required: true
	Raw *ConfigSubsection `json:"raw"`
}

// Validate validates this config URL
func (m *ConfigURL) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInsteadOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigURL) validateInsteadOf(formats strfmt.Registry) error {

	if err := validate.Required("InsteadOf", "body", m.InsteadOf); err != nil {
		return err
	}

	return nil
}

func (m *ConfigURL) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConfigURL) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("raw", "body", m.Raw); err != nil {
		return err
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config URL based on the context it is used
func (m *ConfigURL) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigURL) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {

		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigURL) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigURL) UnmarshalBinary(b []byte) error {
	var res ConfigURL
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
