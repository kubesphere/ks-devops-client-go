// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobParameterDefinition job parameter definition
//
// swagger:model job.ParameterDefinition
type JobParameterDefinition struct {

	// choices
	Choices []string `json:"choices"`

	// default parameter value
	DefaultParameterValue *JobParameterValue `json:"defaultParameterValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// file
	File string `json:"file,omitempty"`

	// filter
	Filter string `json:"filter,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// project name
	ProjectName string `json:"projectName,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`

	// value
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this job parameter definition
func (m *JobParameterDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultParameterValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobParameterDefinition) validateDefaultParameterValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultParameterValue) { // not required
		return nil
	}

	if m.DefaultParameterValue != nil {
		if err := m.DefaultParameterValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultParameterValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultParameterValue")
			}
			return err
		}
	}

	return nil
}

func (m *JobParameterDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *JobParameterDefinition) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *JobParameterDefinition) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this job parameter definition based on the context it is used
func (m *JobParameterDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefaultParameterValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobParameterDefinition) contextValidateDefaultParameterValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultParameterValue != nil {

		if swag.IsZero(m.DefaultParameterValue) { // not required
			return nil
		}

		if err := m.DefaultParameterValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultParameterValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultParameterValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobParameterDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobParameterDefinition) UnmarshalBinary(b []byte) error {
	var res JobParameterDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
