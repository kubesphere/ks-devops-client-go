// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineBranch pipeline branch
//
// swagger:model pipeline.Branch
type PipelineBranch struct {

	// branch
	Branch *JobBranch `json:"branch,omitempty"`

	// disabled
	Disabled bool `json:"disabled,omitempty"`

	// latest run
	LatestRun *PipelineLatestRun `json:"latestRun,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameters
	Parameters []*JobParameterDefinition `json:"parameters"`

	// pull request
	PullRequest *JobPullRequest `json:"pullRequest,omitempty"`

	// raw name
	RawName string `json:"rawName,omitempty"`

	// weather score
	// Required: true
	WeatherScore *int32 `json:"weatherScore"`
}

// Validate validates this pipeline branch
func (m *PipelineBranch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestRun(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeatherScore(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineBranch) validateBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.Branch) { // not required
		return nil
	}

	if m.Branch != nil {
		if err := m.Branch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineBranch) validateLatestRun(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestRun) { // not required
		return nil
	}

	if m.LatestRun != nil {
		if err := m.LatestRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestRun")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineBranch) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for i := 0; i < len(m.Parameters); i++ {
		if swag.IsZero(m.Parameters[i]) { // not required
			continue
		}

		if m.Parameters[i] != nil {
			if err := m.Parameters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineBranch) validatePullRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.PullRequest) { // not required
		return nil
	}

	if m.PullRequest != nil {
		if err := m.PullRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pullRequest")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineBranch) validateWeatherScore(formats strfmt.Registry) error {

	if err := validate.Required("weatherScore", "body", m.WeatherScore); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pipeline branch based on the context it is used
func (m *PipelineBranch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestRun(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePullRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineBranch) contextValidateBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.Branch != nil {

		if swag.IsZero(m.Branch) { // not required
			return nil
		}

		if err := m.Branch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineBranch) contextValidateLatestRun(ctx context.Context, formats strfmt.Registry) error {

	if m.LatestRun != nil {

		if swag.IsZero(m.LatestRun) { // not required
			return nil
		}

		if err := m.LatestRun.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latestRun")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latestRun")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineBranch) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Parameters); i++ {

		if m.Parameters[i] != nil {

			if swag.IsZero(m.Parameters[i]) { // not required
				return nil
			}

			if err := m.Parameters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineBranch) contextValidatePullRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.PullRequest != nil {

		if swag.IsZero(m.PullRequest) { // not required
			return nil
		}

		if err := m.PullRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pullRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pullRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineBranch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineBranch) UnmarshalBinary(b []byte) error {
	var res PipelineBranch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
