// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha3GitSource v1alpha3 git source
//
// swagger:model v1alpha3.GitSource
type V1alpha3GitSource struct {

	// credential id to access git source
	CredentialID string `json:"credential_id,omitempty"`

	// Whether to discover a branch
	DiscoverBranches bool `json:"discover_branches,omitempty"`

	// Discover tags configuration
	DiscoverTags bool `json:"discover_tags,omitempty"`

	// advavced git clone options
	GitCloneOption *V1alpha3GitCloneOption `json:"git_clone_option,omitempty"`

	// Regex used to match the name of the branch that needs to be run
	RegexFilter string `json:"regex_filter,omitempty"`

	// uid of scm
	ScmID string `json:"scm_id,omitempty"`

	// url of git source
	URL string `json:"url,omitempty"`
}

// Validate validates this v1alpha3 git source
func (m *V1alpha3GitSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGitCloneOption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3GitSource) validateGitCloneOption(formats strfmt.Registry) error {
	if swag.IsZero(m.GitCloneOption) { // not required
		return nil
	}

	if m.GitCloneOption != nil {
		if err := m.GitCloneOption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_clone_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git_clone_option")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1alpha3 git source based on the context it is used
func (m *V1alpha3GitSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGitCloneOption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3GitSource) contextValidateGitCloneOption(ctx context.Context, formats strfmt.Registry) error {

	if m.GitCloneOption != nil {

		if swag.IsZero(m.GitCloneOption) { // not required
			return nil
		}

		if err := m.GitCloneOption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("git_clone_option")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("git_clone_option")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha3GitSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha3GitSource) UnmarshalBinary(b []byte) error {
	var res V1alpha3GitSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
