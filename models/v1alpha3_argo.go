// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha3Argo v1alpha3 argo
//
// swagger:model v1alpha3.Argo
type V1alpha3Argo struct {

	// cluster resource blacklist
	ClusterResourceBlacklist []*V1GroupKind `json:"clusterResourceBlacklist"`

	// cluster resource whitelist
	ClusterResourceWhitelist []*V1GroupKind `json:"clusterResourceWhitelist"`

	// description
	Description string `json:"description,omitempty"`

	// destinations
	Destinations []*V1alpha3ApplicationDestination `json:"destinations"`

	// namespace resource blacklist
	NamespaceResourceBlacklist []*V1GroupKind `json:"namespaceResourceBlacklist"`

	// namespace resource whitelist
	NamespaceResourceWhitelist []*V1GroupKind `json:"namespaceResourceWhitelist"`

	// orphaned resources
	OrphanedResources *V1alpha3OrphanedResourcesMonitorSettings `json:"orphanedResources,omitempty"`

	// roles
	Roles []*V1alpha3ProjectRole `json:"roles"`

	// signature keys
	SignatureKeys []*V1alpha3SignatureKey `json:"signatureKeys"`

	// source repos
	SourceRepos []string `json:"sourceRepos"`

	// sync windows
	SyncWindows []*V1alpha3SyncWindow `json:"syncWindows"`
}

// Validate validates this v1alpha3 argo
func (m *V1alpha3Argo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterResourceBlacklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterResourceWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceResourceBlacklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceResourceWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrphanedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3Argo) validateClusterResourceBlacklist(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterResourceBlacklist) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterResourceBlacklist); i++ {
		if swag.IsZero(m.ClusterResourceBlacklist[i]) { // not required
			continue
		}

		if m.ClusterResourceBlacklist[i] != nil {
			if err := m.ClusterResourceBlacklist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterResourceBlacklist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterResourceBlacklist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateClusterResourceWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterResourceWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterResourceWhitelist); i++ {
		if swag.IsZero(m.ClusterResourceWhitelist[i]) { // not required
			continue
		}

		if m.ClusterResourceWhitelist[i] != nil {
			if err := m.ClusterResourceWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterResourceWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateDestinations(formats strfmt.Registry) error {
	if swag.IsZero(m.Destinations) { // not required
		return nil
	}

	for i := 0; i < len(m.Destinations); i++ {
		if swag.IsZero(m.Destinations[i]) { // not required
			continue
		}

		if m.Destinations[i] != nil {
			if err := m.Destinations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destinations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateNamespaceResourceBlacklist(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceResourceBlacklist) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceResourceBlacklist); i++ {
		if swag.IsZero(m.NamespaceResourceBlacklist[i]) { // not required
			continue
		}

		if m.NamespaceResourceBlacklist[i] != nil {
			if err := m.NamespaceResourceBlacklist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceBlacklist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespaceResourceBlacklist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateNamespaceResourceWhitelist(formats strfmt.Registry) error {
	if swag.IsZero(m.NamespaceResourceWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceResourceWhitelist); i++ {
		if swag.IsZero(m.NamespaceResourceWhitelist[i]) { // not required
			continue
		}

		if m.NamespaceResourceWhitelist[i] != nil {
			if err := m.NamespaceResourceWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespaceResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateOrphanedResources(formats strfmt.Registry) error {
	if swag.IsZero(m.OrphanedResources) { // not required
		return nil
	}

	if m.OrphanedResources != nil {
		if err := m.OrphanedResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orphanedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orphanedResources")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3Argo) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateSignatureKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.SignatureKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.SignatureKeys); i++ {
		if swag.IsZero(m.SignatureKeys[i]) { // not required
			continue
		}

		if m.SignatureKeys[i] != nil {
			if err := m.SignatureKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatureKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signatureKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) validateSyncWindows(formats strfmt.Registry) error {
	if swag.IsZero(m.SyncWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.SyncWindows); i++ {
		if swag.IsZero(m.SyncWindows[i]) { // not required
			continue
		}

		if m.SyncWindows[i] != nil {
			if err := m.SyncWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("syncWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("syncWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1alpha3 argo based on the context it is used
func (m *V1alpha3Argo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterResourceBlacklist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterResourceWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceResourceBlacklist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamespaceResourceWhitelist(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrphanedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignatureKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSyncWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha3Argo) contextValidateClusterResourceBlacklist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterResourceBlacklist); i++ {

		if m.ClusterResourceBlacklist[i] != nil {

			if swag.IsZero(m.ClusterResourceBlacklist[i]) { // not required
				return nil
			}

			if err := m.ClusterResourceBlacklist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterResourceBlacklist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterResourceBlacklist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateClusterResourceWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClusterResourceWhitelist); i++ {

		if m.ClusterResourceWhitelist[i] != nil {

			if swag.IsZero(m.ClusterResourceWhitelist[i]) { // not required
				return nil
			}

			if err := m.ClusterResourceWhitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterResourceWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("clusterResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateDestinations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Destinations); i++ {

		if m.Destinations[i] != nil {

			if swag.IsZero(m.Destinations[i]) { // not required
				return nil
			}

			if err := m.Destinations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("destinations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateNamespaceResourceBlacklist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamespaceResourceBlacklist); i++ {

		if m.NamespaceResourceBlacklist[i] != nil {

			if swag.IsZero(m.NamespaceResourceBlacklist[i]) { // not required
				return nil
			}

			if err := m.NamespaceResourceBlacklist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceBlacklist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespaceResourceBlacklist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateNamespaceResourceWhitelist(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamespaceResourceWhitelist); i++ {

		if m.NamespaceResourceWhitelist[i] != nil {

			if swag.IsZero(m.NamespaceResourceWhitelist[i]) { // not required
				return nil
			}

			if err := m.NamespaceResourceWhitelist[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceWhitelist" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("namespaceResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateOrphanedResources(ctx context.Context, formats strfmt.Registry) error {

	if m.OrphanedResources != nil {

		if swag.IsZero(m.OrphanedResources) { // not required
			return nil
		}

		if err := m.OrphanedResources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orphanedResources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orphanedResources")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha3Argo) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {

			if swag.IsZero(m.Roles[i]) { // not required
				return nil
			}

			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateSignatureKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SignatureKeys); i++ {

		if m.SignatureKeys[i] != nil {

			if swag.IsZero(m.SignatureKeys[i]) { // not required
				return nil
			}

			if err := m.SignatureKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatureKeys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signatureKeys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha3Argo) contextValidateSyncWindows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SyncWindows); i++ {

		if m.SyncWindows[i] != nil {

			if swag.IsZero(m.SyncWindows[i]) { // not required
				return nil
			}

			if err := m.SyncWindows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("syncWindows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("syncWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha3Argo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha3Argo) UnmarshalBinary(b []byte) error {
	var res V1alpha3Argo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
