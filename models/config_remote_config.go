// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfigRemoteConfig config remote config
//
// swagger:model config.RemoteConfig
type ConfigRemoteConfig struct {

	// fetch
	// Required: true
	Fetch []string `json:"Fetch"`

	// mirror
	// Required: true
	Mirror *bool `json:"Mirror"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// u r ls
	// Required: true
	URLs []string `json:"URLs"`

	// instead of rules applied
	// Required: true
	InsteadOfRulesApplied *bool `json:"insteadOfRulesApplied"`

	// original u r ls
	// Required: true
	OriginalURLs []string `json:"originalURLs"`

	// raw
	// Required: true
	Raw *ConfigSubsection `json:"raw"`
}

// Validate validates this config remote config
func (m *ConfigRemoteConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMirror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsteadOfRulesApplied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalURLs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigRemoteConfig) validateFetch(formats strfmt.Registry) error {

	if err := validate.Required("Fetch", "body", m.Fetch); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateMirror(formats strfmt.Registry) error {

	if err := validate.Required("Mirror", "body", m.Mirror); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateURLs(formats strfmt.Registry) error {

	if err := validate.Required("URLs", "body", m.URLs); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateInsteadOfRulesApplied(formats strfmt.Registry) error {

	if err := validate.Required("insteadOfRulesApplied", "body", m.InsteadOfRulesApplied); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateOriginalURLs(formats strfmt.Registry) error {

	if err := validate.Required("originalURLs", "body", m.OriginalURLs); err != nil {
		return err
	}

	return nil
}

func (m *ConfigRemoteConfig) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("raw", "body", m.Raw); err != nil {
		return err
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this config remote config based on the context it is used
func (m *ConfigRemoteConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfigRemoteConfig) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {

		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfigRemoteConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfigRemoteConfig) UnmarshalBinary(b []byte) error {
	var res ConfigRemoteConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
