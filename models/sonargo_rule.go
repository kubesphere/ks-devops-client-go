// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SonargoRule sonargo rule
//
// swagger:model sonargo.Rule
type SonargoRule struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// debt overloaded
	DebtOverloaded bool `json:"debtOverloaded,omitempty"`

	// html desc
	HTMLDesc string `json:"htmlDesc,omitempty"`

	// is external
	IsExternal bool `json:"isExternal,omitempty"`

	// is template
	IsTemplate bool `json:"isTemplate,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// lang
	Lang string `json:"lang,omitempty"`

	// lang name
	LangName string `json:"langName,omitempty"`

	// md desc
	MdDesc string `json:"mdDesc,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// params
	Params []*SonargoRuleParam `json:"params"`

	// rem fn overloaded
	RemFnOverloaded bool `json:"remFnOverloaded,omitempty"`

	// repo
	Repo string `json:"repo,omitempty"`

	// scope
	Scope string `json:"scope,omitempty"`

	// severity
	Severity string `json:"severity,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// sys tags
	SysTags []string `json:"sysTags"`

	// tags
	Tags []string `json:"tags"`

	// template key
	TemplateKey string `json:"templateKey,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this sonargo rule
func (m *SonargoRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonargoRule) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	for i := 0; i < len(m.Params); i++ {
		if swag.IsZero(m.Params[i]) { // not required
			continue
		}

		if m.Params[i] != nil {
			if err := m.Params[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this sonargo rule based on the context it is used
func (m *SonargoRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonargoRule) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Params); i++ {

		if m.Params[i] != nil {

			if swag.IsZero(m.Params[i]) { // not required
				return nil
			}

			if err := m.Params[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("params" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("params" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SonargoRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SonargoRule) UnmarshalBinary(b []byte) error {
	var res SonargoRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
