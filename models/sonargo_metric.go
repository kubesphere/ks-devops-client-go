// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SonargoMetric sonargo metric
//
// swagger:model sonargo.Metric
type SonargoMetric struct {

	// description
	// Required: true
	Description *string `json:"Description"`

	// domain
	// Required: true
	Domain *string `json:"Domain"`

	// key
	// Required: true
	Key *string `json:"Key"`

	// name
	// Required: true
	Name *string `json:"Name"`

	// type
	// Required: true
	Type *string `json:"Type"`

	// custom
	Custom bool `json:"custom,omitempty"`

	// decimal scale
	DecimalScale int32 `json:"decimalScale,omitempty"`

	// direction
	// Required: true
	Direction *int32 `json:"direction"`

	// hidden
	Hidden bool `json:"hidden,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// qualitative
	Qualitative bool `json:"qualitative,omitempty"`
}

// Validate validates this sonargo metric
func (m *SonargoMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SonargoMetric) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("Description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SonargoMetric) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("Domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *SonargoMetric) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("Key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *SonargoMetric) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SonargoMetric) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *SonargoMetric) validateDirection(formats strfmt.Registry) error {

	if err := validate.Required("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sonargo metric based on context it is used
func (m *SonargoMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SonargoMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SonargoMetric) UnmarshalBinary(b []byte) error {
	var res SonargoMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
