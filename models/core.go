// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Core core
//
// swagger:model .Core
type Core struct {

	// comment char
	// Required: true
	CommentChar *string `json:"CommentChar"`

	// is bare
	// Required: true
	IsBare *bool `json:"IsBare"`

	// repository format version
	// Required: true
	RepositoryFormatVersion *string `json:"RepositoryFormatVersion"`

	// worktree
	// Required: true
	Worktree *string `json:"Worktree"`
}

// Validate validates this core
func (m *Core) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommentChar(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBare(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepositoryFormatVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorktree(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Core) validateCommentChar(formats strfmt.Registry) error {

	if err := validate.Required("CommentChar", "body", m.CommentChar); err != nil {
		return err
	}

	return nil
}

func (m *Core) validateIsBare(formats strfmt.Registry) error {

	if err := validate.Required("IsBare", "body", m.IsBare); err != nil {
		return err
	}

	return nil
}

func (m *Core) validateRepositoryFormatVersion(formats strfmt.Registry) error {

	if err := validate.Required("RepositoryFormatVersion", "body", m.RepositoryFormatVersion); err != nil {
		return err
	}

	return nil
}

func (m *Core) validateWorktree(formats strfmt.Registry) error {

	if err := validate.Required("Worktree", "body", m.Worktree); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this core based on context it is used
func (m *Core) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Core) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Core) UnmarshalBinary(b []byte) error {
	var res Core
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
